{"ast":null,"code":"import React,{createContext,useState,useEffect}from'react';import{validateOpenAIKey}from'../services/openaiService';import{jsx as _jsx}from\"react/jsx-runtime\";const defaultValue={apiKey:'',isValidKey:false,isLoading:false,error:null,setApiKey:()=>{},validateKey:async()=>false,resetError:()=>{}};export const OpenAIContext=/*#__PURE__*/createContext(defaultValue);export const OpenAIProvider=_ref=>{let{children}=_ref;const[apiKey,setApiKey]=useState(()=>{return localStorage.getItem('openai_api_key')||'';});const[isValidKey,setIsValidKey]=useState(false);const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState(null);// Validate API key when it changes\nuseEffect(()=>{const validateAPIKey=async()=>{if(!apiKey){setIsValidKey(false);return;}setIsLoading(true);setError(null);try{const isValid=await validateOpenAIKey(apiKey);setIsValidKey(isValid);if(isValid){localStorage.setItem('openai_api_key',apiKey);}else{setError('Invalid API key. Please check and try again.');}}catch(err){setError('Error validating API key. Please try again later.');setIsValidKey(false);}finally{setIsLoading(false);}};if(apiKey){validateAPIKey();}},[apiKey]);const validateKey=async()=>{if(!apiKey){setError('Please enter an API key');return false;}setIsLoading(true);setError(null);try{const isValid=await validateOpenAIKey(apiKey);setIsValidKey(isValid);if(isValid){localStorage.setItem('openai_api_key',apiKey);return true;}else{setError('Invalid API key. Please check and try again.');return false;}}catch(err){setError('Error validating API key. Please try again later.');setIsValidKey(false);return false;}finally{setIsLoading(false);}};const resetError=()=>{setError(null);};return/*#__PURE__*/_jsx(OpenAIContext.Provider,{value:{apiKey,isValidKey,isLoading,error,setApiKey,validateKey,resetError},children:children});};","map":{"version":3,"names":["React","createContext","useState","useEffect","validateOpenAIKey","jsx","_jsx","defaultValue","apiKey","isValidKey","isLoading","error","setApiKey","validateKey","resetError","OpenAIContext","OpenAIProvider","_ref","children","localStorage","getItem","setIsValidKey","setIsLoading","setError","validateAPIKey","isValid","setItem","err","Provider","value"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/context/OpenAIContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, ReactNode } from 'react';\r\nimport { validateOpenAIKey } from '../services/openaiService';\r\n\r\ninterface OpenAIContextType {\r\n  apiKey: string;\r\n  isValidKey: boolean;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  setApiKey: (key: string) => void;\r\n  validateKey: () => Promise<boolean>;\r\n  resetError: () => void;\r\n}\r\n\r\nconst defaultValue: OpenAIContextType = {\r\n  apiKey: '',\r\n  isValidKey: false,\r\n  isLoading: false,\r\n  error: null,\r\n  setApiKey: () => {},\r\n  validateKey: async () => false,\r\n  resetError: () => {},\r\n};\r\n\r\nexport const OpenAIContext = createContext<OpenAIContextType>(defaultValue);\r\n\r\ninterface OpenAIProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const OpenAIProvider: React.FC<OpenAIProviderProps> = ({ children }) => {\r\n  const [apiKey, setApiKey] = useState<string>(() => {\r\n    return localStorage.getItem('openai_api_key') || '';\r\n  });\r\n  const [isValidKey, setIsValidKey] = useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Validate API key when it changes\r\n  useEffect(() => {\r\n    const validateAPIKey = async () => {\r\n      if (!apiKey) {\r\n        setIsValidKey(false);\r\n        return;\r\n      }\r\n\r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        const isValid = await validateOpenAIKey(apiKey);\r\n        setIsValidKey(isValid);\r\n        \r\n        if (isValid) {\r\n          localStorage.setItem('openai_api_key', apiKey);\r\n        } else {\r\n          setError('Invalid API key. Please check and try again.');\r\n        }\r\n      } catch (err) {\r\n        setError('Error validating API key. Please try again later.');\r\n        setIsValidKey(false);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    if (apiKey) {\r\n      validateAPIKey();\r\n    }\r\n  }, [apiKey]);\r\n\r\n  const validateKey = async (): Promise<boolean> => {\r\n    if (!apiKey) {\r\n      setError('Please enter an API key');\r\n      return false;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const isValid = await validateOpenAIKey(apiKey);\r\n      setIsValidKey(isValid);\r\n      \r\n      if (isValid) {\r\n        localStorage.setItem('openai_api_key', apiKey);\r\n        return true;\r\n      } else {\r\n        setError('Invalid API key. Please check and try again.');\r\n        return false;\r\n      }\r\n    } catch (err) {\r\n      setError('Error validating API key. Please try again later.');\r\n      setIsValidKey(false);\r\n      return false;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const resetError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  return (\r\n    <OpenAIContext.Provider\r\n      value={{\r\n        apiKey,\r\n        isValidKey,\r\n        isLoading,\r\n        error,\r\n        setApiKey,\r\n        validateKey,\r\n        resetError,\r\n      }}\r\n    >\r\n      {children}\r\n    </OpenAIContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}