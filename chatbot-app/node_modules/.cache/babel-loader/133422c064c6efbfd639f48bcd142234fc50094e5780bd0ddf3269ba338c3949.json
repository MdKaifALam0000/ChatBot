{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alamk\\\\OneDrive\\\\Desktop\\\\Chatbot\\\\chatbot-app\\\\src\\\\context\\\\ThemeContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultValue = {\n  theme: 'light',\n  toggleTheme: () => {}\n};\nexport const ThemeContext = /*#__PURE__*/createContext(defaultValue);\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setTheme] = useState(() => {\n    const savedTheme = localStorage.getItem('theme');\n    // Check saved theme or user's system preference\n    if (savedTheme) {\n      return savedTheme;\n    } else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n    return 'light';\n  });\n  useEffect(() => {\n    // Update the HTML class when theme changes\n    if (theme === 'dark') {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"/B2avViexE2Ir1aRtSIy1esUqQg=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","defaultValue","theme","toggleTheme","ThemeContext","ThemeProvider","children","_s","setTheme","savedTheme","localStorage","getItem","window","matchMedia","matches","document","documentElement","classList","add","remove","setItem","prevTheme","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, ReactNode } from 'react';\r\n\r\ntype Theme = 'light' | 'dark';\r\n\r\ninterface ThemeContextType {\r\n  theme: Theme;\r\n  toggleTheme: () => void;\r\n}\r\n\r\nconst defaultValue: ThemeContextType = {\r\n  theme: 'light',\r\n  toggleTheme: () => {},\r\n};\r\n\r\nexport const ThemeContext = createContext<ThemeContextType>(defaultValue);\r\n\r\ninterface ThemeProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\r\n  const [theme, setTheme] = useState<Theme>(() => {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    // Check saved theme or user's system preference\r\n    if (savedTheme) {\r\n      return savedTheme as Theme;\r\n    } else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n      return 'dark';\r\n    }\r\n    return 'light';\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Update the HTML class when theme changes\r\n    if (theme === 'dark') {\r\n      document.documentElement.classList.add('dark');\r\n    } else {\r\n      document.documentElement.classList.remove('dark');\r\n    }\r\n    localStorage.setItem('theme', theme);\r\n  }, [theme]);\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS7E,MAAMC,YAA8B,GAAG;EACrCC,KAAK,EAAE,OAAO;EACdC,WAAW,EAAEA,CAAA,KAAM,CAAC;AACtB,CAAC;AAED,OAAO,MAAMC,YAAY,gBAAGR,aAAa,CAAmBK,YAAY,CAAC;AAMzE,OAAO,MAAMI,aAA2C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3E,MAAM,CAACL,KAAK,EAAEM,QAAQ,CAAC,GAAGX,QAAQ,CAAQ,MAAM;IAC9C,MAAMY,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD;IACA,IAAIF,UAAU,EAAE;MACd,OAAOA,UAAU;IACnB,CAAC,MAAM,IAAIG,MAAM,CAACC,UAAU,IAAID,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,EAAE;MACzF,OAAO,MAAM;IACf;IACA,OAAO,OAAO;EAChB,CAAC,CAAC;EAEFhB,SAAS,CAAC,MAAM;IACd;IACA,IAAII,KAAK,KAAK,MAAM,EAAE;MACpBa,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IAChD,CAAC,MAAM;MACLH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IACnD;IACAT,YAAY,CAACU,OAAO,CAAC,OAAO,EAAElB,KAAK,CAAC;EACtC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBK,QAAQ,CAACa,SAAS,IAAKA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EACnE,CAAC;EAED,oBACErB,OAAA,CAACI,YAAY,CAACkB,QAAQ;IAACC,KAAK,EAAE;MAAErB,KAAK;MAAEC;IAAY,CAAE;IAAAG,QAAA,EAClDA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACpB,EAAA,CA/BWF,aAA2C;AAAAuB,EAAA,GAA3CvB,aAA2C;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}