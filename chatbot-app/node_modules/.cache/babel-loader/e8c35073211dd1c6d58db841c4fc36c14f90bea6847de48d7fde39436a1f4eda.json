{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alamk\\\\OneDrive\\\\Desktop\\\\Chatbot\\\\chatbot-app\\\\src\\\\context\\\\GeminiContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { validateGeminiKey } from '../services/geminiService';\nimport { getGeminiApiKey } from \"../utils/env\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultValue = {\n  apiKey: '',\n  isValidKey: false,\n  isLoading: false,\n  error: null,\n  selectedModel: 'gemini-2.0-flash',\n  setApiKey: () => {},\n  setSelectedModel: () => {},\n  validateKey: async () => false,\n  resetError: () => {}\n};\nexport const GeminiContext = /*#__PURE__*/createContext(defaultValue);\nexport const useGemini = () => {\n  _s();\n  const context = useContext(GeminiContext);\n  if (!context) {\n    throw new Error('useGemini must be used within a GeminiProvider');\n  }\n  return context;\n};\n_s(useGemini, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const GeminiProvider = ({\n  children\n}) => {\n  _s2();\n  // Use environment variable for API key instead of hardcoding\n  const [apiKey, setApiKeyState] = useState(() => {\n    // Try to get key from environment variable first, then localStorage\n    const envKey = getGeminiApiKey();\n    const storedKey = localStorage.getItem('gemini_api_key') || '';\n    return envKey || storedKey;\n  });\n  const [isValidKey, setIsValidKey] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [selectedModel, setSelectedModel] = useState('gemini-2.0-flash');\n\n  // Validate the API key when it changes\n  useEffect(() => {\n    if (!apiKey) {\n      setIsValidKey(false);\n      return;\n    }\n    const validateApiKey = async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const validation = await validateGeminiKey();\n        setIsValidKey(validation.isValid);\n        if (validation.isValid) {\n          localStorage.setItem('gemini_api_key', apiKey);\n        } else {\n          setError(validation.errorMessage || 'Invalid API key. Please check and try again.');\n        }\n      } catch (err) {\n        setError('Error validating API key. Please try again later.');\n        setIsValidKey(false);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    validateApiKey();\n  }, [apiKey]);\n\n  // Update the API key\n  const setApiKey = key => {\n    setApiKeyState(key);\n  };\n  const resetError = () => {\n    setError(null);\n  };\n  return /*#__PURE__*/_jsxDEV(GeminiContext.Provider, {\n    value: {\n      apiKey,\n      isValidKey,\n      isLoading,\n      error,\n      selectedModel,\n      setApiKey,\n      setSelectedModel,\n      validateKey: async () => {\n        const result = await validateGeminiKey();\n        return result.isValid;\n      },\n      resetError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s2(GeminiProvider, \"FeS0Fc1TIOqwEd9KBovKUvVRs4I=\");\n_c = GeminiProvider;\nvar _c;\n$RefreshReg$(_c, \"GeminiProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","validateGeminiKey","getGeminiApiKey","jsxDEV","_jsxDEV","defaultValue","apiKey","isValidKey","isLoading","error","selectedModel","setApiKey","setSelectedModel","validateKey","resetError","GeminiContext","useGemini","_s","context","Error","GeminiProvider","children","_s2","setApiKeyState","envKey","storedKey","localStorage","getItem","setIsValidKey","setIsLoading","setError","validateApiKey","validation","isValid","setItem","errorMessage","err","key","Provider","value","result","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/context/GeminiContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, ReactNode, useContext } from 'react';\r\nimport { validateGeminiKey } from '../services/geminiService';\r\nimport { getGeminiApiKey } from \"../utils/env\";\r\n\r\nexport type GeminiModelType = 'gemini-1.5-flash' | 'gemini-2.0-flash';\r\n\r\ninterface GeminiContextType {\r\n  apiKey: string;\r\n  isValidKey: boolean;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  selectedModel: GeminiModelType;\r\n  setApiKey: (key: string) => void;\r\n  setSelectedModel: (model: GeminiModelType) => void;\r\n  validateKey: () => Promise<boolean>;\r\n  resetError: () => void;\r\n}\r\n\r\nconst defaultValue: GeminiContextType = {\r\n  apiKey: '',\r\n  isValidKey: false,\r\n  isLoading: false,\r\n  error: null,\r\n  selectedModel: 'gemini-2.0-flash',\r\n  setApiKey: () => {},\r\n  setSelectedModel: () => {},\r\n  validateKey: async () => false,\r\n  resetError: () => {},\r\n};\r\n\r\nexport const GeminiContext = createContext<GeminiContextType>(defaultValue);\r\n\r\ninterface GeminiProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const useGemini = () => {\r\n  const context = useContext(GeminiContext);\r\n  \r\n  if (!context) {\r\n    throw new Error('useGemini must be used within a GeminiProvider');\r\n  }\r\n  \r\n  return context;\r\n};\r\n\r\nexport const GeminiProvider: React.FC<GeminiProviderProps> = ({ children }) => {\r\n  // Use environment variable for API key instead of hardcoding\r\n  const [apiKey, setApiKeyState] = useState<string>(() => {\r\n    // Try to get key from environment variable first, then localStorage\r\n    const envKey = getGeminiApiKey();\r\n    const storedKey = localStorage.getItem('gemini_api_key') || '';\r\n    return envKey || storedKey;\r\n  });\r\n  \r\n  const [isValidKey, setIsValidKey] = useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [selectedModel, setSelectedModel] = useState<GeminiModelType>('gemini-2.0-flash');\r\n\r\n  // Validate the API key when it changes\r\n  useEffect(() => {\r\n    if (!apiKey) {\r\n      setIsValidKey(false);\r\n      return;\r\n    }\r\n\r\n    const validateApiKey = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        const validation = await validateGeminiKey();\r\n        setIsValidKey(validation.isValid);\r\n        \r\n        if (validation.isValid) {\r\n          localStorage.setItem('gemini_api_key', apiKey);\r\n        } else {\r\n          setError(validation.errorMessage || 'Invalid API key. Please check and try again.');\r\n        }\r\n      } catch (err) {\r\n        setError('Error validating API key. Please try again later.');\r\n        setIsValidKey(false);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    validateApiKey();\r\n  }, [apiKey]);\r\n\r\n  // Update the API key\r\n  const setApiKey = (key: string) => {\r\n    setApiKeyState(key);\r\n  };\r\n\r\n  const resetError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  return (\r\n    <GeminiContext.Provider\r\n      value={{\r\n        apiKey,\r\n        isValidKey,\r\n        isLoading,\r\n        error,\r\n        selectedModel,\r\n        setApiKey,\r\n        setSelectedModel,\r\n        validateKey: async () => {\r\n          const result = await validateGeminiKey();\r\n          return result.isValid;\r\n        },\r\n        resetError,\r\n      }}\r\n    >\r\n      {children}\r\n    </GeminiContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}