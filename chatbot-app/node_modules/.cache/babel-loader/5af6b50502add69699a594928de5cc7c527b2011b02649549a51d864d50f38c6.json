{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { generateChatResponse } from '../services/geminiService';\nimport { useGemini } from '../contexts/GeminiContext';\nexport const useChat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    apiKey,\n    isKeyValid\n  } = useGemini();\n  const generateResponse = useCallback(async userMessage => {\n    if (!apiKey || !isKeyValid) {\n      setError('Please set up a valid Gemini API key in settings');\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await generateChatResponse([...messages, {\n        content: userMessage,\n        isUser: true\n      }], apiKey);\n      return response;\n    } catch (err) {\n      console.error('Error generating response:', err);\n      setError(err.message || 'Failed to generate response');\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [apiKey, isKeyValid, messages]);\n  const sendMessage = useCallback(async content => {\n    if (!content.trim()) return;\n\n    // Add user message\n    const userMessage = {\n      content: content.trim(),\n      isUser: true\n    };\n    setMessages(prev => [...prev, userMessage]);\n\n    // Generate and add AI response\n    const response = await generateResponse(content);\n    if (response) {\n      setMessages(prev => [...prev, {\n        content: response,\n        isUser: false\n      }]);\n    }\n  }, [generateResponse]);\n  const clearMessages = useCallback(() => {\n    setMessages([]);\n    setError(null);\n  }, []);\n  return {\n    messages,\n    isLoading,\n    error,\n    sendMessage,\n    clearMessages\n  };\n};\n_s(useChat, \"BIE9J7glFeXNNdlr3B+F8rgZ3FY=\", false, function () {\n  return [useGemini];\n});\nexport default useChat;","map":{"version":3,"names":["useState","useCallback","generateChatResponse","useGemini","useChat","_s","messages","setMessages","isLoading","setIsLoading","error","setError","apiKey","isKeyValid","generateResponse","userMessage","response","content","isUser","err","console","message","sendMessage","trim","prev","clearMessages"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/hooks/useChat.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { generateChatResponse } from '../services/geminiService';\r\nimport { useGemini } from '../contexts/GeminiContext';\r\n\r\ninterface Message {\r\n  content: string;\r\n  isUser: boolean;\r\n}\r\n\r\nexport const useChat = () => {\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { apiKey, isKeyValid } = useGemini();\r\n\r\n  const generateResponse = useCallback(async (userMessage: string) => {\r\n    if (!apiKey || !isKeyValid) {\r\n      setError('Please set up a valid Gemini API key in settings');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await generateChatResponse(\r\n        [...messages, { content: userMessage, isUser: true }],\r\n        apiKey\r\n      );\r\n      return response;\r\n    } catch (err: any) {\r\n      console.error('Error generating response:', err);\r\n      setError(err.message || 'Failed to generate response');\r\n      return null;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [apiKey, isKeyValid, messages]);\r\n\r\n  const sendMessage = useCallback(async (content: string) => {\r\n    if (!content.trim()) return;\r\n\r\n    // Add user message\r\n    const userMessage = { content: content.trim(), isUser: true };\r\n    setMessages(prev => [...prev, userMessage]);\r\n\r\n    // Generate and add AI response\r\n    const response = await generateResponse(content);\r\n    if (response) {\r\n      setMessages(prev => [...prev, { content: response, isUser: false }]);\r\n    }\r\n  }, [generateResponse]);\r\n\r\n  const clearMessages = useCallback(() => {\r\n    setMessages([]);\r\n    setError(null);\r\n  }, []);\r\n\r\n  return {\r\n    messages,\r\n    isLoading,\r\n    error,\r\n    sendMessage,\r\n    clearMessages\r\n  };\r\n};\r\n\r\nexport default useChat; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,oBAAoB,QAAQ,2BAA2B;AAChE,SAASC,SAAS,QAAQ,2BAA2B;AAOrD,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAY,EAAE,CAAC;EACvD,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM;IAAEY,MAAM;IAAEC;EAAW,CAAC,GAAGV,SAAS,CAAC,CAAC;EAE1C,MAAMW,gBAAgB,GAAGb,WAAW,CAAC,MAAOc,WAAmB,IAAK;IAClE,IAAI,CAACH,MAAM,IAAI,CAACC,UAAU,EAAE;MAC1BF,QAAQ,CAAC,kDAAkD,CAAC;MAC5D;IACF;IAEAF,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMK,QAAQ,GAAG,MAAMd,oBAAoB,CACzC,CAAC,GAAGI,QAAQ,EAAE;QAAEW,OAAO,EAAEF,WAAW;QAAEG,MAAM,EAAE;MAAK,CAAC,CAAC,EACrDN,MACF,CAAC;MACD,OAAOI,QAAQ;IACjB,CAAC,CAAC,OAAOG,GAAQ,EAAE;MACjBC,OAAO,CAACV,KAAK,CAAC,4BAA4B,EAAES,GAAG,CAAC;MAChDR,QAAQ,CAACQ,GAAG,CAACE,OAAO,IAAI,6BAA6B,CAAC;MACtD,OAAO,IAAI;IACb,CAAC,SAAS;MACRZ,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,CAACG,MAAM,EAAEC,UAAU,EAAEP,QAAQ,CAAC,CAAC;EAElC,MAAMgB,WAAW,GAAGrB,WAAW,CAAC,MAAOgB,OAAe,IAAK;IACzD,IAAI,CAACA,OAAO,CAACM,IAAI,CAAC,CAAC,EAAE;;IAErB;IACA,MAAMR,WAAW,GAAG;MAAEE,OAAO,EAAEA,OAAO,CAACM,IAAI,CAAC,CAAC;MAAEL,MAAM,EAAE;IAAK,CAAC;IAC7DX,WAAW,CAACiB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAET,WAAW,CAAC,CAAC;;IAE3C;IACA,MAAMC,QAAQ,GAAG,MAAMF,gBAAgB,CAACG,OAAO,CAAC;IAChD,IAAID,QAAQ,EAAE;MACZT,WAAW,CAACiB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;QAAEP,OAAO,EAAED,QAAQ;QAAEE,MAAM,EAAE;MAAM,CAAC,CAAC,CAAC;IACtE;EACF,CAAC,EAAE,CAACJ,gBAAgB,CAAC,CAAC;EAEtB,MAAMW,aAAa,GAAGxB,WAAW,CAAC,MAAM;IACtCM,WAAW,CAAC,EAAE,CAAC;IACfI,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLL,QAAQ;IACRE,SAAS;IACTE,KAAK;IACLY,WAAW;IACXG;EACF,CAAC;AACH,CAAC;AAACpB,EAAA,CAxDWD,OAAO;EAAA,QAIaD,SAAS;AAAA;AAsD1C,eAAeC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}