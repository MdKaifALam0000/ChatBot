{"ast":null,"code":"import{useState,useCallback}from'react';import{generateChatResponse}from'../services/geminiService';export const useChat=()=>{const[messages,setMessages]=useState([]);const[isLoading,setIsLoading]=useState(false);const[isTyping,setIsTyping]=useState(false);const[error,setError]=useState(null);const generateResponse=useCallback(async userMessage=>{setIsLoading(true);setError(null);try{// Include the new user message in the context\nconst chatHistory=[...messages];// Add the current message to history\nconst response=await generateChatResponse([...chatHistory,{content:userMessage,isUser:true}]);if(!response){throw new Error('No response received from the AI');}return response;}catch(err){console.error('Error generating response:',err);setError(err.message||'Failed to generate response');return null;}finally{setIsLoading(false);}},[messages]);const sendMessage=useCallback(async content=>{if(!content.trim())return;// Clear any existing errors\nsetError(null);// Add user message\nconst userMessage={id:Date.now().toString(),content:content.trim(),isUser:true,timestamp:new Date()};setMessages(prev=>[...prev,userMessage]);// Generate and add AI response\nconst response=await generateResponse(content);if(response){const aiMessage={id:Date.now().toString(),content:response,isUser:false,timestamp:new Date()};setMessages(prev=>[...prev,aiMessage]);}},[generateResponse]);const clearMessages=useCallback(()=>{setMessages([]);setError(null);},[]);return{messages,isLoading,isTyping,error,sendMessage,clearMessages};};export default useChat;","map":{"version":3,"names":["useState","useCallback","generateChatResponse","useChat","messages","setMessages","isLoading","setIsLoading","isTyping","setIsTyping","error","setError","generateResponse","userMessage","chatHistory","response","content","isUser","Error","err","console","message","sendMessage","trim","id","Date","now","toString","timestamp","prev","aiMessage","clearMessages"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/hooks/useChat.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { generateChatResponse } from '../services/geminiService';\r\n\r\ninterface Message {\r\n  id: string;\r\n  content: string;\r\n  isUser: boolean;\r\n  timestamp: Date;\r\n}\r\n\r\nexport const useChat = () => {\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const generateResponse = useCallback(async (userMessage: string) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Include the new user message in the context\r\n      const chatHistory = [...messages];\r\n      \r\n      // Add the current message to history\r\n      const response = await generateChatResponse(\r\n        [...chatHistory, { content: userMessage, isUser: true }]\r\n      );\r\n\r\n      if (!response) {\r\n        throw new Error('No response received from the AI');\r\n      }\r\n\r\n      return response;\r\n    } catch (err: any) {\r\n      console.error('Error generating response:', err);\r\n      setError(err.message || 'Failed to generate response');\r\n      return null;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [messages]);\r\n\r\n  const sendMessage = useCallback(async (content: string) => {\r\n    if (!content.trim()) return;\r\n\r\n    // Clear any existing errors\r\n    setError(null);\r\n\r\n    // Add user message\r\n    const userMessage: Message = {\r\n      id: Date.now().toString(),\r\n      content: content.trim(),\r\n      isUser: true,\r\n      timestamp: new Date()\r\n    };\r\n    setMessages(prev => [...prev, userMessage]);\r\n\r\n    // Generate and add AI response\r\n    const response = await generateResponse(content);\r\n    if (response) {\r\n      const aiMessage: Message = {\r\n        id: Date.now().toString(),\r\n        content: response,\r\n        isUser: false,\r\n        timestamp: new Date()\r\n      };\r\n      setMessages(prev => [...prev, aiMessage]);\r\n    }\r\n  }, [generateResponse]);\r\n\r\n  const clearMessages = useCallback(() => {\r\n    setMessages([]);\r\n    setError(null);\r\n  }, []);\r\n\r\n  return {\r\n    messages,\r\n    isLoading,\r\n    isTyping,\r\n    error,\r\n    sendMessage,\r\n    clearMessages\r\n  };\r\n};\r\n\r\nexport default useChat; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}