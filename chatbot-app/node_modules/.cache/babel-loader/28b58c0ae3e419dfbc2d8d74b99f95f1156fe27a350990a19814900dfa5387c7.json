{"ast":null,"code":"import { io } from 'socket.io-client';\nlet socket = null;\nlet isDemo = false;\nlet messageCallbacks = [];\n\n// Connect to the socket server\nexport const connectSocket = token => {\n  // Check if this is a demo token\n  if (token === 'demo-token-1234567890') {\n    isDemo = true;\n    console.log('Connected to demo socket');\n    return null;\n  }\n  try {\n    if (!socket) {\n      socket = io('http://localhost:5000', {\n        auth: {\n          token\n        }\n      });\n    }\n    return socket;\n  } catch (error) {\n    console.error('Socket connection error:', error);\n    isDemo = true; // Fall back to demo mode\n    return null;\n  }\n};\n\n// Disconnect from the socket server\nexport const disconnectSocket = () => {\n  if (isDemo) {\n    isDemo = false;\n    messageCallbacks = [];\n    console.log('Disconnected from demo socket');\n    return;\n  }\n  if (socket) {\n    socket.disconnect();\n    socket = null;\n  }\n};\n\n// Get the socket instance\nexport const getSocket = () => {\n  return socket;\n};\n\n// Join a chat room\nexport const joinRoom = roomId => {\n  if (isDemo) {\n    console.log(`Demo: Joined room ${roomId}`);\n    return;\n  }\n  if (socket) {\n    socket.emit('join_room', roomId);\n  }\n};\n\n// Send a message to the chatbot\nexport const sendMessage = message => {\n  if (isDemo) {\n    console.log(`Demo: Sent message - ${message}`);\n    return;\n  }\n  if (socket) {\n    socket.emit('send_message', {\n      content: message,\n      timestamp: new Date()\n    });\n  }\n};\n\n// Listen for incoming messages\nexport const onReceiveMessage = callback => {\n  if (isDemo) {\n    // Store callback for demo mode\n    messageCallbacks.push(callback);\n    return;\n  }\n  if (socket) {\n    socket.on('receive_message', callback);\n  }\n};\n\n// Remove event listener\nexport const offReceiveMessage = () => {\n  if (isDemo) {\n    messageCallbacks = [];\n    return;\n  }\n  if (socket) {\n    socket.off('receive_message');\n  }\n};\n\n// For demo mode - trigger callbacks with a message\nexport const triggerDemoMessage = message => {\n  if (isDemo) {\n    messageCallbacks.forEach(callback => callback(message));\n  }\n};","map":{"version":3,"names":["io","socket","isDemo","messageCallbacks","connectSocket","token","console","log","auth","error","disconnectSocket","disconnect","getSocket","joinRoom","roomId","emit","sendMessage","message","content","timestamp","Date","onReceiveMessage","callback","push","on","offReceiveMessage","off","triggerDemoMessage","forEach"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/services/socketService.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\r\n\r\nlet socket: Socket | null = null;\r\nlet isDemo = false;\r\nlet messageCallbacks: Array<(message: any) => void> = [];\r\n\r\n// Connect to the socket server\r\nexport const connectSocket = (token: string): Socket | null => {\r\n  // Check if this is a demo token\r\n  if (token === 'demo-token-1234567890') {\r\n    isDemo = true;\r\n    console.log('Connected to demo socket');\r\n    return null;\r\n  }\r\n  \r\n  try {\r\n    if (!socket) {\r\n      socket = io('http://localhost:5000', {\r\n        auth: {\r\n          token\r\n        }\r\n      });\r\n    }\r\n    return socket;\r\n  } catch (error) {\r\n    console.error('Socket connection error:', error);\r\n    isDemo = true; // Fall back to demo mode\r\n    return null;\r\n  }\r\n};\r\n\r\n// Disconnect from the socket server\r\nexport const disconnectSocket = (): void => {\r\n  if (isDemo) {\r\n    isDemo = false;\r\n    messageCallbacks = [];\r\n    console.log('Disconnected from demo socket');\r\n    return;\r\n  }\r\n  \r\n  if (socket) {\r\n    socket.disconnect();\r\n    socket = null;\r\n  }\r\n};\r\n\r\n// Get the socket instance\r\nexport const getSocket = (): Socket | null => {\r\n  return socket;\r\n};\r\n\r\n// Join a chat room\r\nexport const joinRoom = (roomId: string): void => {\r\n  if (isDemo) {\r\n    console.log(`Demo: Joined room ${roomId}`);\r\n    return;\r\n  }\r\n  \r\n  if (socket) {\r\n    socket.emit('join_room', roomId);\r\n  }\r\n};\r\n\r\n// Send a message to the chatbot\r\nexport const sendMessage = (message: string): void => {\r\n  if (isDemo) {\r\n    console.log(`Demo: Sent message - ${message}`);\r\n    return;\r\n  }\r\n  \r\n  if (socket) {\r\n    socket.emit('send_message', { content: message, timestamp: new Date() });\r\n  }\r\n};\r\n\r\n// Listen for incoming messages\r\nexport const onReceiveMessage = (callback: (message: any) => void): void => {\r\n  if (isDemo) {\r\n    // Store callback for demo mode\r\n    messageCallbacks.push(callback);\r\n    return;\r\n  }\r\n  \r\n  if (socket) {\r\n    socket.on('receive_message', callback);\r\n  }\r\n};\r\n\r\n// Remove event listener\r\nexport const offReceiveMessage = (): void => {\r\n  if (isDemo) {\r\n    messageCallbacks = [];\r\n    return;\r\n  }\r\n  \r\n  if (socket) {\r\n    socket.off('receive_message');\r\n  }\r\n};\r\n\r\n// For demo mode - trigger callbacks with a message\r\nexport const triggerDemoMessage = (message: any): void => {\r\n  if (isDemo) {\r\n    messageCallbacks.forEach(callback => callback(message));\r\n  }\r\n}; "],"mappings":"AAAA,SAASA,EAAE,QAAgB,kBAAkB;AAE7C,IAAIC,MAAqB,GAAG,IAAI;AAChC,IAAIC,MAAM,GAAG,KAAK;AAClB,IAAIC,gBAA+C,GAAG,EAAE;;AAExD;AACA,OAAO,MAAMC,aAAa,GAAIC,KAAa,IAAoB;EAC7D;EACA,IAAIA,KAAK,KAAK,uBAAuB,EAAE;IACrCH,MAAM,GAAG,IAAI;IACbI,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvC,OAAO,IAAI;EACb;EAEA,IAAI;IACF,IAAI,CAACN,MAAM,EAAE;MACXA,MAAM,GAAGD,EAAE,CAAC,uBAAuB,EAAE;QACnCQ,IAAI,EAAE;UACJH;QACF;MACF,CAAC,CAAC;IACJ;IACA,OAAOJ,MAAM;EACf,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChDP,MAAM,GAAG,IAAI,CAAC,CAAC;IACf,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMQ,gBAAgB,GAAGA,CAAA,KAAY;EAC1C,IAAIR,MAAM,EAAE;IACVA,MAAM,GAAG,KAAK;IACdC,gBAAgB,GAAG,EAAE;IACrBG,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5C;EACF;EAEA,IAAIN,MAAM,EAAE;IACVA,MAAM,CAACU,UAAU,CAAC,CAAC;IACnBV,MAAM,GAAG,IAAI;EACf;AACF,CAAC;;AAED;AACA,OAAO,MAAMW,SAAS,GAAGA,CAAA,KAAqB;EAC5C,OAAOX,MAAM;AACf,CAAC;;AAED;AACA,OAAO,MAAMY,QAAQ,GAAIC,MAAc,IAAW;EAChD,IAAIZ,MAAM,EAAE;IACVI,OAAO,CAACC,GAAG,CAAC,qBAAqBO,MAAM,EAAE,CAAC;IAC1C;EACF;EAEA,IAAIb,MAAM,EAAE;IACVA,MAAM,CAACc,IAAI,CAAC,WAAW,EAAED,MAAM,CAAC;EAClC;AACF,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAIC,OAAe,IAAW;EACpD,IAAIf,MAAM,EAAE;IACVI,OAAO,CAACC,GAAG,CAAC,wBAAwBU,OAAO,EAAE,CAAC;IAC9C;EACF;EAEA,IAAIhB,MAAM,EAAE;IACVA,MAAM,CAACc,IAAI,CAAC,cAAc,EAAE;MAAEG,OAAO,EAAED,OAAO;MAAEE,SAAS,EAAE,IAAIC,IAAI,CAAC;IAAE,CAAC,CAAC;EAC1E;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAIC,QAAgC,IAAW;EAC1E,IAAIpB,MAAM,EAAE;IACV;IACAC,gBAAgB,CAACoB,IAAI,CAACD,QAAQ,CAAC;IAC/B;EACF;EAEA,IAAIrB,MAAM,EAAE;IACVA,MAAM,CAACuB,EAAE,CAAC,iBAAiB,EAAEF,QAAQ,CAAC;EACxC;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,iBAAiB,GAAGA,CAAA,KAAY;EAC3C,IAAIvB,MAAM,EAAE;IACVC,gBAAgB,GAAG,EAAE;IACrB;EACF;EAEA,IAAIF,MAAM,EAAE;IACVA,MAAM,CAACyB,GAAG,CAAC,iBAAiB,CAAC;EAC/B;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAIV,OAAY,IAAW;EACxD,IAAIf,MAAM,EAAE;IACVC,gBAAgB,CAACyB,OAAO,CAACN,QAAQ,IAAIA,QAAQ,CAACL,OAAO,CAAC,CAAC;EACzD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}