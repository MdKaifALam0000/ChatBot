{"ast":null,"code":"import { io } from 'socket.io-client';\nlet socket = null;\n\n// Connect to the socket server\nexport const connectSocket = token => {\n  if (!socket) {\n    socket = io('http://localhost:5000', {\n      auth: {\n        token\n      }\n    });\n  }\n  return socket;\n};\n\n// Disconnect from the socket server\nexport const disconnectSocket = () => {\n  if (socket) {\n    socket.disconnect();\n    socket = null;\n  }\n};\n\n// Get the socket instance\nexport const getSocket = () => {\n  return socket;\n};\n\n// Join a chat room\nexport const joinRoom = roomId => {\n  if (socket) {\n    socket.emit('join_room', roomId);\n  }\n};\n\n// Send a message to the chatbot\nexport const sendMessage = message => {\n  if (socket) {\n    socket.emit('send_message', {\n      content: message,\n      timestamp: new Date()\n    });\n  }\n};\n\n// Listen for incoming messages\nexport const onReceiveMessage = callback => {\n  if (socket) {\n    socket.on('receive_message', callback);\n  }\n};\n\n// Remove event listener\nexport const offReceiveMessage = () => {\n  if (socket) {\n    socket.off('receive_message');\n  }\n};","map":{"version":3,"names":["io","socket","connectSocket","token","auth","disconnectSocket","disconnect","getSocket","joinRoom","roomId","emit","sendMessage","message","content","timestamp","Date","onReceiveMessage","callback","on","offReceiveMessage","off"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/services/socketService.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\r\n\r\nlet socket: Socket | null = null;\r\n\r\n// Connect to the socket server\r\nexport const connectSocket = (token: string): Socket => {\r\n  if (!socket) {\r\n    socket = io('http://localhost:5000', {\r\n      auth: {\r\n        token\r\n      }\r\n    });\r\n  }\r\n  return socket;\r\n};\r\n\r\n// Disconnect from the socket server\r\nexport const disconnectSocket = (): void => {\r\n  if (socket) {\r\n    socket.disconnect();\r\n    socket = null;\r\n  }\r\n};\r\n\r\n// Get the socket instance\r\nexport const getSocket = (): Socket | null => {\r\n  return socket;\r\n};\r\n\r\n// Join a chat room\r\nexport const joinRoom = (roomId: string): void => {\r\n  if (socket) {\r\n    socket.emit('join_room', roomId);\r\n  }\r\n};\r\n\r\n// Send a message to the chatbot\r\nexport const sendMessage = (message: string): void => {\r\n  if (socket) {\r\n    socket.emit('send_message', { content: message, timestamp: new Date() });\r\n  }\r\n};\r\n\r\n// Listen for incoming messages\r\nexport const onReceiveMessage = (callback: (message: any) => void): void => {\r\n  if (socket) {\r\n    socket.on('receive_message', callback);\r\n  }\r\n};\r\n\r\n// Remove event listener\r\nexport const offReceiveMessage = (): void => {\r\n  if (socket) {\r\n    socket.off('receive_message');\r\n  }\r\n}; "],"mappings":"AAAA,SAASA,EAAE,QAAgB,kBAAkB;AAE7C,IAAIC,MAAqB,GAAG,IAAI;;AAEhC;AACA,OAAO,MAAMC,aAAa,GAAIC,KAAa,IAAa;EACtD,IAAI,CAACF,MAAM,EAAE;IACXA,MAAM,GAAGD,EAAE,CAAC,uBAAuB,EAAE;MACnCI,IAAI,EAAE;QACJD;MACF;IACF,CAAC,CAAC;EACJ;EACA,OAAOF,MAAM;AACf,CAAC;;AAED;AACA,OAAO,MAAMI,gBAAgB,GAAGA,CAAA,KAAY;EAC1C,IAAIJ,MAAM,EAAE;IACVA,MAAM,CAACK,UAAU,CAAC,CAAC;IACnBL,MAAM,GAAG,IAAI;EACf;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,SAAS,GAAGA,CAAA,KAAqB;EAC5C,OAAON,MAAM;AACf,CAAC;;AAED;AACA,OAAO,MAAMO,QAAQ,GAAIC,MAAc,IAAW;EAChD,IAAIR,MAAM,EAAE;IACVA,MAAM,CAACS,IAAI,CAAC,WAAW,EAAED,MAAM,CAAC;EAClC;AACF,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAIC,OAAe,IAAW;EACpD,IAAIX,MAAM,EAAE;IACVA,MAAM,CAACS,IAAI,CAAC,cAAc,EAAE;MAAEG,OAAO,EAAED,OAAO;MAAEE,SAAS,EAAE,IAAIC,IAAI,CAAC;IAAE,CAAC,CAAC;EAC1E;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAIC,QAAgC,IAAW;EAC1E,IAAIhB,MAAM,EAAE;IACVA,MAAM,CAACiB,EAAE,CAAC,iBAAiB,EAAED,QAAQ,CAAC;EACxC;AACF,CAAC;;AAED;AACA,OAAO,MAAME,iBAAiB,GAAGA,CAAA,KAAY;EAC3C,IAAIlB,MAAM,EAAE;IACVA,MAAM,CAACmB,GAAG,CAAC,iBAAiB,CAAC;EAC/B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}