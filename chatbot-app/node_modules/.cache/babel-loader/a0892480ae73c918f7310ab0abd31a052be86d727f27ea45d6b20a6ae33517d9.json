{"ast":null,"code":"import axios from 'axios';\n\n// Gemini API configuration\nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent';\nexport const generateChatResponse = async (messages, apiKey) => {\n  if (!apiKey) {\n    throw new Error('No Gemini API key provided');\n  }\n  try {\n    // Convert messages to Gemini format\n    const formattedMessages = [];\n\n    // Add system message\n    formattedMessages.push({\n      role: 'model',\n      parts: [{\n        text: 'You are a helpful AI assistant. Provide concise and accurate responses to user questions.'\n      }]\n    });\n\n    // Add user and assistant messages\n    messages.forEach(msg => {\n      formattedMessages.push({\n        role: msg.isUser ? 'user' : 'model',\n        parts: [{\n          text: msg.content\n        }]\n      });\n    });\n    const requestBody = {\n      contents: formattedMessages,\n      generationConfig: {\n        temperature: 0.7,\n        maxOutputTokens: 1000,\n        topP: 0.95,\n        topK: 40\n      }\n    };\n    const response = await axios.post(`${GEMINI_API_URL}?key=${apiKey}`, requestBody, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.data && response.data.candidates && response.data.candidates.length > 0 && response.data.candidates[0].content && response.data.candidates[0].content.parts && response.data.candidates[0].content.parts.length > 0) {\n      return response.data.candidates[0].content.parts[0].text.trim();\n    } else {\n      throw new Error('No response from Gemini');\n    }\n  } catch (error) {\n    console.error('Error calling Gemini API:', error);\n    // Return a friendly error message or the specific error from Gemini\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(`Gemini API Error: ${error.response.data.error.message}`);\n    }\n    throw new Error('Failed to generate response. Please try again later.');\n  }\n};\n\n// Function to check if a Gemini API key is valid\nexport const validateGeminiKey = async apiKey => {\n  if (!apiKey) return {\n    isValid: false,\n    errorMessage: 'API key is empty'\n  };\n  try {\n    const requestBody = {\n      contents: [{\n        role: 'user',\n        parts: [{\n          text: 'Hello'\n        }]\n      }],\n      generationConfig: {\n        maxOutputTokens: 5\n      }\n    };\n    await axios.post(`${GEMINI_API_URL}?key=${apiKey}`, requestBody, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return {\n      isValid: true\n    };\n  } catch (error) {\n    console.error('API key validation error:', error);\n\n    // Extract more detailed error message if available\n    let errorMessage = 'Invalid API key';\n    if (error.response && error.response.data && error.response.data.error) {\n      errorMessage = `Gemini API Error: ${error.response.data.error.message}`;\n    } else if (error.message) {\n      errorMessage = error.message;\n    }\n    return {\n      isValid: false,\n      errorMessage\n    };\n  }\n};","map":{"version":3,"names":["axios","GEMINI_API_URL","generateChatResponse","messages","apiKey","Error","formattedMessages","push","role","parts","text","forEach","msg","isUser","content","requestBody","contents","generationConfig","temperature","maxOutputTokens","topP","topK","response","post","headers","data","candidates","length","trim","error","console","message","validateGeminiKey","isValid","errorMessage"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/services/geminiService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Gemini API configuration\r\nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent';\r\n\r\ninterface GeminiMessage {\r\n  role: 'user' | 'model';\r\n  parts: {\r\n    text: string;\r\n  }[];\r\n}\r\n\r\ninterface GeminiRequestBody {\r\n  contents: GeminiMessage[];\r\n  generationConfig?: {\r\n    temperature?: number;\r\n    maxOutputTokens?: number;\r\n    topP?: number;\r\n    topK?: number;\r\n  };\r\n}\r\n\r\nexport const generateChatResponse = async (\r\n  messages: { content: string; isUser: boolean }[],\r\n  apiKey: string\r\n): Promise<string> => {\r\n  if (!apiKey) {\r\n    throw new Error('No Gemini API key provided');\r\n  }\r\n\r\n  try {\r\n    // Convert messages to Gemini format\r\n    const formattedMessages: GeminiMessage[] = [];\r\n    \r\n    // Add system message\r\n    formattedMessages.push({\r\n      role: 'model',\r\n      parts: [{\r\n        text: 'You are a helpful AI assistant. Provide concise and accurate responses to user questions.'\r\n      }]\r\n    });\r\n    \r\n    // Add user and assistant messages\r\n    messages.forEach(msg => {\r\n      formattedMessages.push({\r\n        role: msg.isUser ? 'user' : 'model',\r\n        parts: [{ text: msg.content }]\r\n      });\r\n    });\r\n\r\n    const requestBody: GeminiRequestBody = {\r\n      contents: formattedMessages,\r\n      generationConfig: {\r\n        temperature: 0.7,\r\n        maxOutputTokens: 1000,\r\n        topP: 0.95,\r\n        topK: 40\r\n      }\r\n    };\r\n\r\n    const response = await axios.post(\r\n      `${GEMINI_API_URL}?key=${apiKey}`,\r\n      requestBody,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    );\r\n\r\n    if (response.data && \r\n        response.data.candidates && \r\n        response.data.candidates.length > 0 && \r\n        response.data.candidates[0].content && \r\n        response.data.candidates[0].content.parts && \r\n        response.data.candidates[0].content.parts.length > 0) {\r\n      return response.data.candidates[0].content.parts[0].text.trim();\r\n    } else {\r\n      throw new Error('No response from Gemini');\r\n    }\r\n  } catch (error: any) {\r\n    console.error('Error calling Gemini API:', error);\r\n    // Return a friendly error message or the specific error from Gemini\r\n    if (error.response && error.response.data && error.response.data.error) {\r\n      throw new Error(`Gemini API Error: ${error.response.data.error.message}`);\r\n    }\r\n    throw new Error('Failed to generate response. Please try again later.');\r\n  }\r\n};\r\n\r\n// Function to check if a Gemini API key is valid\r\nexport const validateGeminiKey = async (apiKey: string): Promise<{isValid: boolean; errorMessage?: string}> => {\r\n  if (!apiKey) return {isValid: false, errorMessage: 'API key is empty'};\r\n  \r\n  try {\r\n    const requestBody: GeminiRequestBody = {\r\n      contents: [\r\n        {\r\n          role: 'user',\r\n          parts: [{ text: 'Hello' }]\r\n        }\r\n      ],\r\n      generationConfig: {\r\n        maxOutputTokens: 5\r\n      }\r\n    };\r\n\r\n    await axios.post(\r\n      `${GEMINI_API_URL}?key=${apiKey}`,\r\n      requestBody,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    );\r\n    \r\n    return {isValid: true};\r\n  } catch (error: any) {\r\n    console.error('API key validation error:', error);\r\n    \r\n    // Extract more detailed error message if available\r\n    let errorMessage = 'Invalid API key';\r\n    if (error.response && error.response.data && error.response.data.error) {\r\n      errorMessage = `Gemini API Error: ${error.response.data.error.message}`;\r\n    } else if (error.message) {\r\n      errorMessage = error.message;\r\n    }\r\n    \r\n    return {isValid: false, errorMessage};\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}