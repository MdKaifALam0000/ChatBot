{"ast":null,"code":"import React,{createContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const defaultValue={theme:'light',toggleTheme:()=>{}};export const ThemeContext=/*#__PURE__*/createContext(defaultValue);export const ThemeProvider=_ref=>{let{children}=_ref;const[theme,setTheme]=useState(()=>{const savedTheme=localStorage.getItem('theme');// Check saved theme or user's system preference\nif(savedTheme){return savedTheme;}else if(window.matchMedia&&window.matchMedia('(prefers-color-scheme: dark)').matches){return'dark';}return'light';});useEffect(()=>{// Update the HTML class when theme changes\nif(theme==='dark'){document.documentElement.classList.add('dark');}else{document.documentElement.classList.remove('dark');}localStorage.setItem('theme',theme);},[theme]);const toggleTheme=()=>{setTheme(prevTheme=>prevTheme==='light'?'dark':'light');};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:{theme,toggleTheme},children:children});};","map":{"version":3,"names":["React","createContext","useState","useEffect","jsx","_jsx","defaultValue","theme","toggleTheme","ThemeContext","ThemeProvider","_ref","children","setTheme","savedTheme","localStorage","getItem","window","matchMedia","matches","document","documentElement","classList","add","remove","setItem","prevTheme","Provider","value"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, ReactNode } from 'react';\r\n\r\ntype Theme = 'light' | 'dark';\r\n\r\ninterface ThemeContextType {\r\n  theme: Theme;\r\n  toggleTheme: () => void;\r\n}\r\n\r\nconst defaultValue: ThemeContextType = {\r\n  theme: 'light',\r\n  toggleTheme: () => {},\r\n};\r\n\r\nexport const ThemeContext = createContext<ThemeContextType>(defaultValue);\r\n\r\ninterface ThemeProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\r\n  const [theme, setTheme] = useState<Theme>(() => {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    // Check saved theme or user's system preference\r\n    if (savedTheme) {\r\n      return savedTheme as Theme;\r\n    } else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n      return 'dark';\r\n    }\r\n    return 'light';\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Update the HTML class when theme changes\r\n    if (theme === 'dark') {\r\n      document.documentElement.classList.add('dark');\r\n    } else {\r\n      document.documentElement.classList.remove('dark');\r\n    }\r\n    localStorage.setItem('theme', theme);\r\n  }, [theme]);\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,SAAS,KAAmB,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAS7E,KAAM,CAAAC,YAA8B,CAAG,CACrCC,KAAK,CAAE,OAAO,CACdC,WAAW,CAAEA,CAAA,GAAM,CAAC,CACtB,CAAC,CAED,MAAO,MAAM,CAAAC,YAAY,cAAGR,aAAa,CAAmBK,YAAY,CAAC,CAMzE,MAAO,MAAM,CAAAI,aAA2C,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACtE,KAAM,CAACJ,KAAK,CAAEM,QAAQ,CAAC,CAAGX,QAAQ,CAAQ,IAAM,CAC9C,KAAM,CAAAY,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAChD;AACA,GAAIF,UAAU,CAAE,CACd,MAAO,CAAAA,UAAU,CACnB,CAAC,IAAM,IAAIG,MAAM,CAACC,UAAU,EAAID,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,CAAE,CACzF,MAAO,MAAM,CACf,CACA,MAAO,OAAO,CAChB,CAAC,CAAC,CAEFhB,SAAS,CAAC,IAAM,CACd;AACA,GAAII,KAAK,GAAK,MAAM,CAAE,CACpBa,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC,CAChD,CAAC,IAAM,CACLH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC,CACnD,CACAT,YAAY,CAACU,OAAO,CAAC,OAAO,CAAElB,KAAK,CAAC,CACtC,CAAC,CAAE,CAACA,KAAK,CAAC,CAAC,CAEX,KAAM,CAAAC,WAAW,CAAGA,CAAA,GAAM,CACxBK,QAAQ,CAACa,SAAS,EAAKA,SAAS,GAAK,OAAO,CAAG,MAAM,CAAG,OAAQ,CAAC,CACnE,CAAC,CAED,mBACErB,IAAA,CAACI,YAAY,CAACkB,QAAQ,EAACC,KAAK,CAAE,CAAErB,KAAK,CAAEC,WAAY,CAAE,CAAAI,QAAA,CAClDA,QAAQ,CACY,CAAC,CAE5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}