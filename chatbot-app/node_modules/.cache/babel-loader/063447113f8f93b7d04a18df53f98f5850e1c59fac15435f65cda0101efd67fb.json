{"ast":null,"code":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Get API key from environment variables\nconst API_KEY = process.env.REACT_APP_GEMINI_API_KEY || \"\";\n\n// Check if API key is available\nif (!API_KEY) {\n  console.error(\"Gemini API key not found! Please add REACT_APP_GEMINI_API_KEY to your .env file\");\n}\n\n// Initialize the Gemini API client\nconst getGeminiClient = () => {\n  return new GoogleGenerativeAI(API_KEY);\n};\n\n// Function for Gemini Flash model (single message)\nexport const generateGeminiVisionResponse = async prompt => {\n  try {\n    const genAI = getGeminiClient();\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-1.5-flash\"\n    });\n    console.log('Sending request to Gemini Flash...');\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const text = response.text();\n    console.log('Received response from Gemini Flash API');\n    return text;\n  } catch (error) {\n    console.error('Error calling Gemini Flash API:', error);\n    if (error.message) {\n      throw new Error(`Gemini Flash API Error: ${error.message}`);\n    }\n    throw new Error('Failed to generate response from Gemini Flash. Please try again later.');\n  }\n};\n\n// Function for Gemini 2.0 Flash model (higher throughput)\nexport const generateGemini2FlashResponse = async prompt => {\n  try {\n    const genAI = getGeminiClient();\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-2.0-flash\"\n    });\n    console.log('Sending request to Gemini 2.0 Flash...');\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const text = response.text();\n    console.log('Received response from Gemini 2.0 Flash API');\n    return text;\n  } catch (error) {\n    console.error('Error calling Gemini 2.0 Flash API:', error);\n    if (error.message) {\n      throw new Error(`Gemini 2.0 Flash API Error: ${error.message}`);\n    }\n    throw new Error('Failed to generate response from Gemini 2.0 Flash. Please try again later.');\n  }\n};\n\n// Alternative implementation using fetch directly (similar to the curl command)\nexport const generateGeminiResponseRaw = async (prompt, model = \"gemini-2.0-flash\") => {\n  try {\n    const url = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${API_KEY}`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }]\n      })\n    });\n    if (!response.ok) {\n      var _error$error;\n      const error = await response.json();\n      throw new Error(((_error$error = error.error) === null || _error$error === void 0 ? void 0 : _error$error.message) || `API error: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.candidates[0].content.parts[0].text;\n  } catch (error) {\n    console.error(`Error calling ${model} API directly:`, error);\n    if (error.message) {\n      throw new Error(`${model} API Error: ${error.message}`);\n    }\n    throw new Error(`Failed to generate response from ${model}. Please try again later.`);\n  }\n};\nexport const validateGeminiKey = async () => {\n  try {\n    const genAI = getGeminiClient();\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-2.0-flash\"\n    });\n    console.log('Validating Gemini API key...');\n    const prompt = \"Hello, this is a test message to validate the API key.\";\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const text = response.text();\n    console.log('Key validation successful');\n    return {\n      isValid: true\n    };\n  } catch (error) {\n    console.error('API key validation error:', error);\n    let errorMessage = 'Invalid API key';\n    if (error.message) {\n      errorMessage = `Gemini API Error: ${error.message}`;\n    }\n    return {\n      isValid: false,\n      errorMessage\n    };\n  }\n};","map":{"version":3,"names":["GoogleGenerativeAI","API_KEY","process","env","REACT_APP_GEMINI_API_KEY","console","error","getGeminiClient","generateGeminiVisionResponse","prompt","genAI","model","getGenerativeModel","log","result","generateContent","response","text","message","Error","generateGemini2FlashResponse","generateGeminiResponseRaw","url","fetch","method","headers","body","JSON","stringify","contents","parts","ok","_error$error","json","status","data","candidates","content","validateGeminiKey","isValid","errorMessage"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/services/geminiService.ts"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\n// Get API key from environment variables\r\nconst API_KEY = process.env.REACT_APP_GEMINI_API_KEY || \"\";\r\n\r\n// Check if API key is available\r\nif (!API_KEY) {\r\n  console.error(\"Gemini API key not found! Please add REACT_APP_GEMINI_API_KEY to your .env file\");\r\n}\r\n\r\n// Initialize the Gemini API client\r\nconst getGeminiClient = () => {\r\n  return new GoogleGenerativeAI(API_KEY);\r\n};\r\n\r\n// Function for Gemini Flash model (single message)\r\nexport const generateGeminiVisionResponse = async (\r\n  prompt: string\r\n): Promise<string> => {\r\n  try {\r\n    const genAI = getGeminiClient();\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\r\n\r\n    console.log('Sending request to Gemini Flash...');\r\n    const result = await model.generateContent(prompt);\r\n    const response = await result.response;\r\n    const text = response.text();\r\n    \r\n    console.log('Received response from Gemini Flash API');\r\n    return text;\r\n  } catch (error: any) {\r\n    console.error('Error calling Gemini Flash API:', error);\r\n    \r\n    if (error.message) {\r\n      throw new Error(`Gemini Flash API Error: ${error.message}`);\r\n    }\r\n    \r\n    throw new Error('Failed to generate response from Gemini Flash. Please try again later.');\r\n  }\r\n};\r\n\r\n// Function for Gemini 2.0 Flash model (higher throughput)\r\nexport const generateGemini2FlashResponse = async (\r\n  prompt: string\r\n): Promise<string> => {\r\n  try {\r\n    const genAI = getGeminiClient();\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\r\n\r\n    console.log('Sending request to Gemini 2.0 Flash...');\r\n    const result = await model.generateContent(prompt);\r\n    const response = await result.response;\r\n    const text = response.text();\r\n    \r\n    console.log('Received response from Gemini 2.0 Flash API');\r\n    return text;\r\n  } catch (error: any) {\r\n    console.error('Error calling Gemini 2.0 Flash API:', error);\r\n    \r\n    if (error.message) {\r\n      throw new Error(`Gemini 2.0 Flash API Error: ${error.message}`);\r\n    }\r\n    \r\n    throw new Error('Failed to generate response from Gemini 2.0 Flash. Please try again later.');\r\n  }\r\n};\r\n\r\n// Alternative implementation using fetch directly (similar to the curl command)\r\nexport const generateGeminiResponseRaw = async (\r\n  prompt: string,\r\n  model: string = \"gemini-2.0-flash\"\r\n): Promise<string> => {\r\n  try {\r\n    const url = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${API_KEY}`;\r\n    \r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        contents: [{\r\n          parts: [{ text: prompt }]\r\n        }]\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.json();\r\n      throw new Error(error.error?.message || `API error: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.candidates[0].content.parts[0].text;\r\n  } catch (error: any) {\r\n    console.error(`Error calling ${model} API directly:`, error);\r\n    \r\n    if (error.message) {\r\n      throw new Error(`${model} API Error: ${error.message}`);\r\n    }\r\n    \r\n    throw new Error(`Failed to generate response from ${model}. Please try again later.`);\r\n  }\r\n};\r\n\r\nexport const validateGeminiKey = async (): Promise<{isValid: boolean; errorMessage?: string}> => {\r\n  try {\r\n    const genAI = getGeminiClient();\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\r\n\r\n    console.log('Validating Gemini API key...');\r\n    const prompt = \"Hello, this is a test message to validate the API key.\";\r\n    const result = await model.generateContent(prompt);\r\n    const response = await result.response;\r\n    const text = response.text();\r\n    \r\n    console.log('Key validation successful');\r\n    return {isValid: true};\r\n  } catch (error: any) {\r\n    console.error('API key validation error:', error);\r\n    \r\n    let errorMessage = 'Invalid API key';\r\n    if (error.message) {\r\n      errorMessage = `Gemini API Error: ${error.message}`;\r\n    }\r\n    \r\n    return {isValid: false, errorMessage};\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}