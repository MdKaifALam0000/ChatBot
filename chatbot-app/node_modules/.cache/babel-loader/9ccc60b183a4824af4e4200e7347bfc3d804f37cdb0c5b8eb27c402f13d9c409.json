{"ast":null,"code":"import React,{createContext,useState,useEffect}from'react';import axios from'axios';// Demo user for testing\nimport{jsx as _jsx}from\"react/jsx-runtime\";const DEMO_USER={_id:'1234567890',username:'demouser',email:'demo@example.com',password:'password123'// In a real app, never store passwords in plain text\n};const defaultValue={user:null,token:null,isAuthenticated:false,loading:true,login:async()=>{},register:async()=>{},logout:()=>{},error:null};export const AuthContext=/*#__PURE__*/createContext(defaultValue);export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[token,setToken]=useState(localStorage.getItem('token'));const[isAuthenticated,setIsAuthenticated]=useState(false);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);// API URL (should be set in .env in production)\nconst API_URL='http://localhost:5000/api';// Set auth token for all requests\nconst setAuthToken=token=>{if(token){axios.defaults.headers.common['x-auth-token']=token;localStorage.setItem('token',token);}else{delete axios.defaults.headers.common['x-auth-token'];localStorage.removeItem('token');}};// Load user on initial load\nuseEffect(()=>{const loadUser=async()=>{if(token){setAuthToken(token);try{// Check if token is the demo token\nif(token==='demo-token-1234567890'){setUser({_id:DEMO_USER._id,username:DEMO_USER.username,email:DEMO_USER.email});setIsAuthenticated(true);}else{// Try to get user from API\ntry{const res=await axios.get(`${API_URL}/users/me`);setUser(res.data);setIsAuthenticated(true);}catch(err){// If API request fails, fall back to demo login\nconst savedEmail=localStorage.getItem('user_email');if(savedEmail===DEMO_USER.email){setUser({_id:DEMO_USER._id,username:DEMO_USER.username,email:DEMO_USER.email});setIsAuthenticated(true);}else{setToken(null);setUser(null);setIsAuthenticated(false);setAuthToken(null);}}}}catch(err){setToken(null);setUser(null);setIsAuthenticated(false);setAuthToken(null);}}setLoading(false);};loadUser();},[token]);// Login user\nconst login=async(email,password)=>{try{setError(null);// Check for demo credentials\nif(email===DEMO_USER.email&&password===DEMO_USER.password){const demoToken='demo-token-1234567890';setToken(demoToken);setAuthToken(demoToken);setIsAuthenticated(true);setUser({_id:DEMO_USER._id,username:DEMO_USER.username,email:DEMO_USER.email});localStorage.setItem('user_email',email);return;}// Try API login if not demo\ntry{const res=await axios.post(`${API_URL}/auth/login`,{email,password});setToken(res.data.token);setAuthToken(res.data.token);setIsAuthenticated(true);setUser(res.data.user);}catch(err){var _axiosError$response,_axiosError$response$;const axiosError=err;throw new Error(((_axiosError$response=axiosError.response)===null||_axiosError$response===void 0?void 0:(_axiosError$response$=_axiosError$response.data)===null||_axiosError$response$===void 0?void 0:_axiosError$response$.message)||'Login failed. Please check your credentials.');}}catch(err){setError(err.message||'An error occurred during login');setToken(null);setUser(null);setIsAuthenticated(false);setAuthToken(null);}};// Register user\nconst register=async(username,email,password)=>{try{setError(null);// Always allow registration with demo credentials\nif(email===DEMO_USER.email){const demoToken='demo-token-1234567890';setToken(demoToken);setAuthToken(demoToken);setIsAuthenticated(true);setUser({_id:DEMO_USER._id,username:username||DEMO_USER.username,email:DEMO_USER.email});localStorage.setItem('user_email',email);return;}// Try API registration if not demo\ntry{const res=await axios.post(`${API_URL}/auth/register`,{username,email,password});setToken(res.data.token);setAuthToken(res.data.token);setIsAuthenticated(true);setUser(res.data.user);}catch(err){var _axiosError$response2,_axiosError$response3;const axiosError=err;throw new Error(((_axiosError$response2=axiosError.response)===null||_axiosError$response2===void 0?void 0:(_axiosError$response3=_axiosError$response2.data)===null||_axiosError$response3===void 0?void 0:_axiosError$response3.message)||'Registration failed. Please try again.');}}catch(err){setError(err.message||'An error occurred during registration');setToken(null);setUser(null);setIsAuthenticated(false);setAuthToken(null);}};// Logout user\nconst logout=()=>{setToken(null);setUser(null);setIsAuthenticated(false);setAuthToken(null);localStorage.removeItem('user_email');};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,token,isAuthenticated,loading,login,register,logout,error},children:children});};","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsx","_jsx","DEMO_USER","_id","username","email","password","defaultValue","user","token","isAuthenticated","loading","login","register","logout","error","AuthContext","AuthProvider","_ref","children","setUser","setToken","localStorage","getItem","setIsAuthenticated","setLoading","setError","API_URL","setAuthToken","defaults","headers","common","setItem","removeItem","loadUser","res","get","data","err","savedEmail","demoToken","post","_axiosError$response","_axiosError$response$","axiosError","Error","response","message","_axiosError$response2","_axiosError$response3","Provider","value"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, ReactNode } from 'react';\r\nimport axios, { AxiosError } from 'axios';\r\n\r\n// Demo user for testing\r\nconst DEMO_USER = {\r\n  _id: '1234567890',\r\n  username: 'demouser',\r\n  email: 'demo@example.com',\r\n  password: 'password123' // In a real app, never store passwords in plain text\r\n};\r\n\r\ninterface User {\r\n  _id: string;\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  token: string | null;\r\n  isAuthenticated: boolean;\r\n  loading: boolean;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  register: (username: string, email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  error: string | null;\r\n}\r\n\r\nconst defaultValue: AuthContextType = {\r\n  user: null,\r\n  token: null,\r\n  isAuthenticated: false,\r\n  loading: true,\r\n  login: async () => {},\r\n  register: async () => {},\r\n  logout: () => {},\r\n  error: null,\r\n};\r\n\r\nexport const AuthContext = createContext<AuthContextType>(defaultValue);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [token, setToken] = useState<string | null>(localStorage.getItem('token'));\r\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // API URL (should be set in .env in production)\r\n  const API_URL = 'http://localhost:5000/api';\r\n\r\n  // Set auth token for all requests\r\n  const setAuthToken = (token: string | null) => {\r\n    if (token) {\r\n      axios.defaults.headers.common['x-auth-token'] = token;\r\n      localStorage.setItem('token', token);\r\n    } else {\r\n      delete axios.defaults.headers.common['x-auth-token'];\r\n      localStorage.removeItem('token');\r\n    }\r\n  };\r\n\r\n  // Load user on initial load\r\n  useEffect(() => {\r\n    const loadUser = async () => {\r\n      if (token) {\r\n        setAuthToken(token);\r\n        try {\r\n          // Check if token is the demo token\r\n          if (token === 'demo-token-1234567890') {\r\n            setUser({\r\n              _id: DEMO_USER._id,\r\n              username: DEMO_USER.username,\r\n              email: DEMO_USER.email\r\n            });\r\n            setIsAuthenticated(true);\r\n          } else {\r\n            // Try to get user from API\r\n            try {\r\n              const res = await axios.get(`${API_URL}/users/me`);\r\n              setUser(res.data);\r\n              setIsAuthenticated(true);\r\n            } catch (err) {\r\n              // If API request fails, fall back to demo login\r\n              const savedEmail = localStorage.getItem('user_email');\r\n              if (savedEmail === DEMO_USER.email) {\r\n                setUser({\r\n                  _id: DEMO_USER._id,\r\n                  username: DEMO_USER.username,\r\n                  email: DEMO_USER.email\r\n                });\r\n                setIsAuthenticated(true);\r\n              } else {\r\n                setToken(null);\r\n                setUser(null);\r\n                setIsAuthenticated(false);\r\n                setAuthToken(null);\r\n              }\r\n            }\r\n          }\r\n        } catch (err) {\r\n          setToken(null);\r\n          setUser(null);\r\n          setIsAuthenticated(false);\r\n          setAuthToken(null);\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    loadUser();\r\n  }, [token]);\r\n\r\n  // Login user\r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      // Check for demo credentials\r\n      if (email === DEMO_USER.email && password === DEMO_USER.password) {\r\n        const demoToken = 'demo-token-1234567890';\r\n        setToken(demoToken);\r\n        setAuthToken(demoToken);\r\n        setIsAuthenticated(true);\r\n        setUser({\r\n          _id: DEMO_USER._id,\r\n          username: DEMO_USER.username,\r\n          email: DEMO_USER.email\r\n        });\r\n        localStorage.setItem('user_email', email);\r\n        return;\r\n      }\r\n      \r\n      // Try API login if not demo\r\n      try {\r\n        const res = await axios.post(`${API_URL}/auth/login`, { email, password });\r\n        setToken(res.data.token);\r\n        setAuthToken(res.data.token);\r\n        setIsAuthenticated(true);\r\n        setUser(res.data.user);\r\n      } catch (err: unknown) {\r\n        const axiosError = err as AxiosError<{ message: string }>;\r\n        throw new Error(axiosError.response?.data?.message || 'Login failed. Please check your credentials.');\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.message || 'An error occurred during login');\r\n      setToken(null);\r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n      setAuthToken(null);\r\n    }\r\n  };\r\n\r\n  // Register user\r\n  const register = async (username: string, email: string, password: string) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      // Always allow registration with demo credentials\r\n      if (email === DEMO_USER.email) {\r\n        const demoToken = 'demo-token-1234567890';\r\n        setToken(demoToken);\r\n        setAuthToken(demoToken);\r\n        setIsAuthenticated(true);\r\n        setUser({\r\n          _id: DEMO_USER._id,\r\n          username: username || DEMO_USER.username,\r\n          email: DEMO_USER.email\r\n        });\r\n        localStorage.setItem('user_email', email);\r\n        return;\r\n      }\r\n      \r\n      // Try API registration if not demo\r\n      try {\r\n        const res = await axios.post(`${API_URL}/auth/register`, { username, email, password });\r\n        setToken(res.data.token);\r\n        setAuthToken(res.data.token);\r\n        setIsAuthenticated(true);\r\n        setUser(res.data.user);\r\n      } catch (err: unknown) {\r\n        const axiosError = err as AxiosError<{ message: string }>;\r\n        throw new Error(axiosError.response?.data?.message || 'Registration failed. Please try again.');\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.message || 'An error occurred during registration');\r\n      setToken(null);\r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n      setAuthToken(null);\r\n    }\r\n  };\r\n\r\n  // Logout user\r\n  const logout = () => {\r\n    setToken(null);\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    setAuthToken(null);\r\n    localStorage.removeItem('user_email');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        token,\r\n        isAuthenticated,\r\n        loading,\r\n        login,\r\n        register,\r\n        logout,\r\n        error,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,SAAS,KAAmB,OAAO,CAC5E,MAAO,CAAAC,KAAK,KAAsB,OAAO,CAEzC;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,SAAS,CAAG,CAChBC,GAAG,CAAE,YAAY,CACjBC,QAAQ,CAAE,UAAU,CACpBC,KAAK,CAAE,kBAAkB,CACzBC,QAAQ,CAAE,aAAc;AAC1B,CAAC,CAmBD,KAAM,CAAAC,YAA6B,CAAG,CACpCC,IAAI,CAAE,IAAI,CACVC,KAAK,CAAE,IAAI,CACXC,eAAe,CAAE,KAAK,CACtBC,OAAO,CAAE,IAAI,CACbC,KAAK,CAAE,KAAAA,CAAA,GAAY,CAAC,CAAC,CACrBC,QAAQ,CAAE,KAAAA,CAAA,GAAY,CAAC,CAAC,CACxBC,MAAM,CAAEA,CAAA,GAAM,CAAC,CAAC,CAChBC,KAAK,CAAE,IACT,CAAC,CAED,MAAO,MAAM,CAAAC,WAAW,cAAGpB,aAAa,CAAkBW,YAAY,CAAC,CAMvE,MAAO,MAAM,CAAAU,YAAyC,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACpE,KAAM,CAACV,IAAI,CAAEY,OAAO,CAAC,CAAGvB,QAAQ,CAAc,IAAI,CAAC,CACnD,KAAM,CAACY,KAAK,CAAEY,QAAQ,CAAC,CAAGxB,QAAQ,CAAgByB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAChF,KAAM,CAACb,eAAe,CAAEc,kBAAkB,CAAC,CAAG3B,QAAQ,CAAU,KAAK,CAAC,CACtE,KAAM,CAACc,OAAO,CAAEc,UAAU,CAAC,CAAG5B,QAAQ,CAAU,IAAI,CAAC,CACrD,KAAM,CAACkB,KAAK,CAAEW,QAAQ,CAAC,CAAG7B,QAAQ,CAAgB,IAAI,CAAC,CAEvD;AACA,KAAM,CAAA8B,OAAO,CAAG,2BAA2B,CAE3C;AACA,KAAM,CAAAC,YAAY,CAAInB,KAAoB,EAAK,CAC7C,GAAIA,KAAK,CAAE,CACTV,KAAK,CAAC8B,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,cAAc,CAAC,CAAGtB,KAAK,CACrDa,YAAY,CAACU,OAAO,CAAC,OAAO,CAAEvB,KAAK,CAAC,CACtC,CAAC,IAAM,CACL,MAAO,CAAAV,KAAK,CAAC8B,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,cAAc,CAAC,CACpDT,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC,CAClC,CACF,CAAC,CAED;AACAnC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAoC,QAAQ,CAAG,KAAAA,CAAA,GAAY,CAC3B,GAAIzB,KAAK,CAAE,CACTmB,YAAY,CAACnB,KAAK,CAAC,CACnB,GAAI,CACF;AACA,GAAIA,KAAK,GAAK,uBAAuB,CAAE,CACrCW,OAAO,CAAC,CACNjB,GAAG,CAAED,SAAS,CAACC,GAAG,CAClBC,QAAQ,CAAEF,SAAS,CAACE,QAAQ,CAC5BC,KAAK,CAAEH,SAAS,CAACG,KACnB,CAAC,CAAC,CACFmB,kBAAkB,CAAC,IAAI,CAAC,CAC1B,CAAC,IAAM,CACL;AACA,GAAI,CACF,KAAM,CAAAW,GAAG,CAAG,KAAM,CAAApC,KAAK,CAACqC,GAAG,CAAC,GAAGT,OAAO,WAAW,CAAC,CAClDP,OAAO,CAACe,GAAG,CAACE,IAAI,CAAC,CACjBb,kBAAkB,CAAC,IAAI,CAAC,CAC1B,CAAE,MAAOc,GAAG,CAAE,CACZ;AACA,KAAM,CAAAC,UAAU,CAAGjB,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CACrD,GAAIgB,UAAU,GAAKrC,SAAS,CAACG,KAAK,CAAE,CAClCe,OAAO,CAAC,CACNjB,GAAG,CAAED,SAAS,CAACC,GAAG,CAClBC,QAAQ,CAAEF,SAAS,CAACE,QAAQ,CAC5BC,KAAK,CAAEH,SAAS,CAACG,KACnB,CAAC,CAAC,CACFmB,kBAAkB,CAAC,IAAI,CAAC,CAC1B,CAAC,IAAM,CACLH,QAAQ,CAAC,IAAI,CAAC,CACdD,OAAO,CAAC,IAAI,CAAC,CACbI,kBAAkB,CAAC,KAAK,CAAC,CACzBI,YAAY,CAAC,IAAI,CAAC,CACpB,CACF,CACF,CACF,CAAE,MAAOU,GAAG,CAAE,CACZjB,QAAQ,CAAC,IAAI,CAAC,CACdD,OAAO,CAAC,IAAI,CAAC,CACbI,kBAAkB,CAAC,KAAK,CAAC,CACzBI,YAAY,CAAC,IAAI,CAAC,CACpB,CACF,CACAH,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAEDS,QAAQ,CAAC,CAAC,CACZ,CAAC,CAAE,CAACzB,KAAK,CAAC,CAAC,CAEX;AACA,KAAM,CAAAG,KAAK,CAAG,KAAAA,CAAOP,KAAa,CAAEC,QAAgB,GAAK,CACvD,GAAI,CACFoB,QAAQ,CAAC,IAAI,CAAC,CAEd;AACA,GAAIrB,KAAK,GAAKH,SAAS,CAACG,KAAK,EAAIC,QAAQ,GAAKJ,SAAS,CAACI,QAAQ,CAAE,CAChE,KAAM,CAAAkC,SAAS,CAAG,uBAAuB,CACzCnB,QAAQ,CAACmB,SAAS,CAAC,CACnBZ,YAAY,CAACY,SAAS,CAAC,CACvBhB,kBAAkB,CAAC,IAAI,CAAC,CACxBJ,OAAO,CAAC,CACNjB,GAAG,CAAED,SAAS,CAACC,GAAG,CAClBC,QAAQ,CAAEF,SAAS,CAACE,QAAQ,CAC5BC,KAAK,CAAEH,SAAS,CAACG,KACnB,CAAC,CAAC,CACFiB,YAAY,CAACU,OAAO,CAAC,YAAY,CAAE3B,KAAK,CAAC,CACzC,OACF,CAEA;AACA,GAAI,CACF,KAAM,CAAA8B,GAAG,CAAG,KAAM,CAAApC,KAAK,CAAC0C,IAAI,CAAC,GAAGd,OAAO,aAAa,CAAE,CAAEtB,KAAK,CAAEC,QAAS,CAAC,CAAC,CAC1Ee,QAAQ,CAACc,GAAG,CAACE,IAAI,CAAC5B,KAAK,CAAC,CACxBmB,YAAY,CAACO,GAAG,CAACE,IAAI,CAAC5B,KAAK,CAAC,CAC5Be,kBAAkB,CAAC,IAAI,CAAC,CACxBJ,OAAO,CAACe,GAAG,CAACE,IAAI,CAAC7B,IAAI,CAAC,CACxB,CAAE,MAAO8B,GAAY,CAAE,KAAAI,oBAAA,CAAAC,qBAAA,CACrB,KAAM,CAAAC,UAAU,CAAGN,GAAsC,CACzD,KAAM,IAAI,CAAAO,KAAK,CAAC,EAAAH,oBAAA,CAAAE,UAAU,CAACE,QAAQ,UAAAJ,oBAAA,kBAAAC,qBAAA,CAAnBD,oBAAA,CAAqBL,IAAI,UAAAM,qBAAA,iBAAzBA,qBAAA,CAA2BI,OAAO,GAAI,8CAA8C,CAAC,CACvG,CACF,CAAE,MAAOT,GAAQ,CAAE,CACjBZ,QAAQ,CAACY,GAAG,CAACS,OAAO,EAAI,gCAAgC,CAAC,CACzD1B,QAAQ,CAAC,IAAI,CAAC,CACdD,OAAO,CAAC,IAAI,CAAC,CACbI,kBAAkB,CAAC,KAAK,CAAC,CACzBI,YAAY,CAAC,IAAI,CAAC,CACpB,CACF,CAAC,CAED;AACA,KAAM,CAAAf,QAAQ,CAAG,KAAAA,CAAOT,QAAgB,CAAEC,KAAa,CAAEC,QAAgB,GAAK,CAC5E,GAAI,CACFoB,QAAQ,CAAC,IAAI,CAAC,CAEd;AACA,GAAIrB,KAAK,GAAKH,SAAS,CAACG,KAAK,CAAE,CAC7B,KAAM,CAAAmC,SAAS,CAAG,uBAAuB,CACzCnB,QAAQ,CAACmB,SAAS,CAAC,CACnBZ,YAAY,CAACY,SAAS,CAAC,CACvBhB,kBAAkB,CAAC,IAAI,CAAC,CACxBJ,OAAO,CAAC,CACNjB,GAAG,CAAED,SAAS,CAACC,GAAG,CAClBC,QAAQ,CAAEA,QAAQ,EAAIF,SAAS,CAACE,QAAQ,CACxCC,KAAK,CAAEH,SAAS,CAACG,KACnB,CAAC,CAAC,CACFiB,YAAY,CAACU,OAAO,CAAC,YAAY,CAAE3B,KAAK,CAAC,CACzC,OACF,CAEA;AACA,GAAI,CACF,KAAM,CAAA8B,GAAG,CAAG,KAAM,CAAApC,KAAK,CAAC0C,IAAI,CAAC,GAAGd,OAAO,gBAAgB,CAAE,CAAEvB,QAAQ,CAAEC,KAAK,CAAEC,QAAS,CAAC,CAAC,CACvFe,QAAQ,CAACc,GAAG,CAACE,IAAI,CAAC5B,KAAK,CAAC,CACxBmB,YAAY,CAACO,GAAG,CAACE,IAAI,CAAC5B,KAAK,CAAC,CAC5Be,kBAAkB,CAAC,IAAI,CAAC,CACxBJ,OAAO,CAACe,GAAG,CAACE,IAAI,CAAC7B,IAAI,CAAC,CACxB,CAAE,MAAO8B,GAAY,CAAE,KAAAU,qBAAA,CAAAC,qBAAA,CACrB,KAAM,CAAAL,UAAU,CAAGN,GAAsC,CACzD,KAAM,IAAI,CAAAO,KAAK,CAAC,EAAAG,qBAAA,CAAAJ,UAAU,CAACE,QAAQ,UAAAE,qBAAA,kBAAAC,qBAAA,CAAnBD,qBAAA,CAAqBX,IAAI,UAAAY,qBAAA,iBAAzBA,qBAAA,CAA2BF,OAAO,GAAI,wCAAwC,CAAC,CACjG,CACF,CAAE,MAAOT,GAAQ,CAAE,CACjBZ,QAAQ,CAACY,GAAG,CAACS,OAAO,EAAI,uCAAuC,CAAC,CAChE1B,QAAQ,CAAC,IAAI,CAAC,CACdD,OAAO,CAAC,IAAI,CAAC,CACbI,kBAAkB,CAAC,KAAK,CAAC,CACzBI,YAAY,CAAC,IAAI,CAAC,CACpB,CACF,CAAC,CAED;AACA,KAAM,CAAAd,MAAM,CAAGA,CAAA,GAAM,CACnBO,QAAQ,CAAC,IAAI,CAAC,CACdD,OAAO,CAAC,IAAI,CAAC,CACbI,kBAAkB,CAAC,KAAK,CAAC,CACzBI,YAAY,CAAC,IAAI,CAAC,CAClBN,YAAY,CAACW,UAAU,CAAC,YAAY,CAAC,CACvC,CAAC,CAED,mBACEhC,IAAA,CAACe,WAAW,CAACkC,QAAQ,EACnBC,KAAK,CAAE,CACL3C,IAAI,CACJC,KAAK,CACLC,eAAe,CACfC,OAAO,CACPC,KAAK,CACLC,QAAQ,CACRC,MAAM,CACNC,KACF,CAAE,CAAAI,QAAA,CAEDA,QAAQ,CACW,CAAC,CAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}