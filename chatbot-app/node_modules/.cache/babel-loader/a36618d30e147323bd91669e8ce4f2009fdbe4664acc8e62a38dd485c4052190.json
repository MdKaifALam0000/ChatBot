{"ast":null,"code":"import axios from 'axios';\n\n// OpenAI API configuration\nconst OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';\nexport const generateChatResponse = async (messages, apiKey) => {\n  if (!apiKey) {\n    throw new Error('No OpenAI API key provided');\n  }\n\n  // Validate API key format first\n  if (!apiKey.startsWith('sk-')) {\n    throw new Error('Invalid OpenAI API key format. Keys should start with \"sk-\"');\n  }\n  try {\n    // Convert messages to OpenAI format\n    const formattedMessages = [{\n      role: 'system',\n      content: 'You are a helpful AI assistant. Provide concise and accurate responses to user questions.'\n    }];\n\n    // Add user and assistant messages\n    messages.forEach(msg => {\n      formattedMessages.push({\n        role: msg.isUser ? 'user' : 'assistant',\n        content: msg.content\n      });\n    });\n    const requestBody = {\n      model: 'gpt-3.5-turbo',\n      // You can upgrade to gpt-4 if available\n      messages: formattedMessages,\n      max_tokens: 1000,\n      temperature: 0.7\n    };\n    const response = await axios.post(OPENAI_API_URL, requestBody, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      }\n    });\n    if (response.data && response.data.choices && response.data.choices.length > 0) {\n      return response.data.choices[0].message.content.trim();\n    } else {\n      throw new Error('No response from OpenAI');\n    }\n  } catch (error) {\n    console.error('Error calling OpenAI API:', error);\n    // Return a friendly error message or the specific error from OpenAI\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(`OpenAI API Error: ${error.response.data.error.message}`);\n    }\n    throw new Error('Failed to generate response. Please try again later.');\n  }\n};\n\n// Function to check if an OpenAI API key is valid\nexport const validateOpenAIKey = async apiKey => {\n  if (!apiKey) return {\n    isValid: false,\n    errorMessage: 'API key is empty'\n  };\n\n  // Check if key has proper format (starts with sk-)\n  if (!apiKey.startsWith('sk-')) {\n    return {\n      isValid: false,\n      errorMessage: 'API key should start with \"sk-\"'\n    };\n  }\n  try {\n    const requestBody = {\n      model: 'gpt-3.5-turbo',\n      messages: [{\n        role: 'system',\n        content: 'Hello'\n      }],\n      max_tokens: 5\n    };\n    await axios.post(OPENAI_API_URL, requestBody, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      }\n    });\n    return {\n      isValid: true\n    };\n  } catch (error) {\n    console.error('API key validation error:', error);\n\n    // Extract more detailed error message if available\n    let errorMessage = 'Invalid API key';\n    if (error.response && error.response.data && error.response.data.error) {\n      errorMessage = `OpenAI API Error: ${error.response.data.error.message}`;\n    } else if (error.message) {\n      errorMessage = error.message;\n    }\n    return {\n      isValid: false,\n      errorMessage\n    };\n  }\n};","map":{"version":3,"names":["axios","OPENAI_API_URL","generateChatResponse","messages","apiKey","Error","startsWith","formattedMessages","role","content","forEach","msg","push","isUser","requestBody","model","max_tokens","temperature","response","post","headers","data","choices","length","message","trim","error","console","validateOpenAIKey","isValid","errorMessage"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/services/openaiService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// OpenAI API configuration\r\nconst OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';\r\n\r\ntype OpenAIRole = 'system' | 'user' | 'assistant';\r\n\r\ninterface OpenAIMessage {\r\n  role: OpenAIRole;\r\n  content: string;\r\n}\r\n\r\ninterface OpenAIRequestBody {\r\n  model: string;\r\n  messages: OpenAIMessage[];\r\n  max_tokens?: number;\r\n  temperature?: number;\r\n  stream?: boolean;\r\n}\r\n\r\ninterface OpenAIResponse {\r\n  id: string;\r\n  object: string;\r\n  created: number;\r\n  choices: {\r\n    index: number;\r\n    message: OpenAIMessage;\r\n    finish_reason: string;\r\n  }[];\r\n  usage: {\r\n    prompt_tokens: number;\r\n    completion_tokens: number;\r\n    total_tokens: number;\r\n  };\r\n}\r\n\r\nexport const generateChatResponse = async (\r\n  messages: { content: string; isUser: boolean }[],\r\n  apiKey: string\r\n): Promise<string> => {\r\n  if (!apiKey) {\r\n    throw new Error('No OpenAI API key provided');\r\n  }\r\n  \r\n  // Validate API key format first\r\n  if (!apiKey.startsWith('sk-')) {\r\n    throw new Error('Invalid OpenAI API key format. Keys should start with \"sk-\"');\r\n  }\r\n\r\n  try {\r\n    // Convert messages to OpenAI format\r\n    const formattedMessages: OpenAIMessage[] = [\r\n      {\r\n        role: 'system',\r\n        content: 'You are a helpful AI assistant. Provide concise and accurate responses to user questions.',\r\n      },\r\n    ];\r\n    \r\n    // Add user and assistant messages\r\n    messages.forEach(msg => {\r\n      formattedMessages.push({\r\n        role: msg.isUser ? 'user' : 'assistant',\r\n        content: msg.content\r\n      });\r\n    });\r\n\r\n    const requestBody: OpenAIRequestBody = {\r\n      model: 'gpt-3.5-turbo', // You can upgrade to gpt-4 if available\r\n      messages: formattedMessages,\r\n      max_tokens: 1000,\r\n      temperature: 0.7,\r\n    };\r\n\r\n    const response = await axios.post<OpenAIResponse>(\r\n      OPENAI_API_URL,\r\n      requestBody,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${apiKey}`\r\n        }\r\n      }\r\n    );\r\n\r\n    if (response.data && response.data.choices && response.data.choices.length > 0) {\r\n      return response.data.choices[0].message.content.trim();\r\n    } else {\r\n      throw new Error('No response from OpenAI');\r\n    }\r\n  } catch (error: any) {\r\n    console.error('Error calling OpenAI API:', error);\r\n    // Return a friendly error message or the specific error from OpenAI\r\n    if (error.response && error.response.data && error.response.data.error) {\r\n      throw new Error(`OpenAI API Error: ${error.response.data.error.message}`);\r\n    }\r\n    throw new Error('Failed to generate response. Please try again later.');\r\n  }\r\n};\r\n\r\n// Function to check if an OpenAI API key is valid\r\nexport const validateOpenAIKey = async (apiKey: string): Promise<{isValid: boolean; errorMessage?: string}> => {\r\n  if (!apiKey) return {isValid: false, errorMessage: 'API key is empty'};\r\n  \r\n  // Check if key has proper format (starts with sk-)\r\n  if (!apiKey.startsWith('sk-')) {\r\n    return {isValid: false, errorMessage: 'API key should start with \"sk-\"'};\r\n  }\r\n  \r\n  try {\r\n    const requestBody: OpenAIRequestBody = {\r\n      model: 'gpt-3.5-turbo',\r\n      messages: [\r\n        {\r\n          role: 'system',\r\n          content: 'Hello'\r\n        }\r\n      ],\r\n      max_tokens: 5\r\n    };\r\n\r\n    await axios.post(\r\n      OPENAI_API_URL,\r\n      requestBody,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${apiKey}`\r\n        }\r\n      }\r\n    );\r\n    \r\n    return {isValid: true};\r\n  } catch (error: any) {\r\n    console.error('API key validation error:', error);\r\n    \r\n    // Extract more detailed error message if available\r\n    let errorMessage = 'Invalid API key';\r\n    if (error.response && error.response.data && error.response.data.error) {\r\n      errorMessage = `OpenAI API Error: ${error.response.data.error.message}`;\r\n    } else if (error.message) {\r\n      errorMessage = error.message;\r\n    }\r\n    \r\n    return {isValid: false, errorMessage};\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}