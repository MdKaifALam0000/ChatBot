{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { generateChatResponse } from '../services/geminiService';\nimport { useGemini } from './useGemini';\nconst useChat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isTyping, setIsTyping] = useState(false);\n  const {\n    apiKey,\n    isValidKey\n  } = useGemini();\n\n  // Clear error whenever messages change\n  useEffect(() => {\n    if (error) setError(null);\n  }, [messages, error]);\n\n  // Function to generate a response from Gemini\n  const generateResponse = async userMessage => {\n    if (!isValidKey || !apiKey) {\n      setError('Please set up your Gemini API key first.');\n      return;\n    }\n    setIsLoading(true);\n    setIsTyping(true);\n    try {\n      // Get the last few messages for context (including the latest user message)\n      const recentMessages = [...messages];\n      if (recentMessages.length > 10) {\n        // Limit context to last 10 messages to avoid token limits\n        recentMessages.splice(0, recentMessages.length - 10);\n      }\n      const response = await generateChatResponse(recentMessages, apiKey);\n      const botMessage = {\n        id: Date.now().toString(),\n        content: response,\n        isUser: false,\n        timestamp: new Date()\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n    } catch (err) {\n      setError(err.message || 'Failed to get response from AI. Please try again.');\n    } finally {\n      setIsLoading(false);\n      setIsTyping(false);\n    }\n  };\n\n  // Send message function (user messages)\n  const sendMessage = useCallback(async content => {\n    if (!content.trim()) return;\n\n    // Create user message\n    const userMessage = {\n      id: Date.now().toString(),\n      content,\n      isUser: true,\n      timestamp: new Date()\n    };\n\n    // Add to messages\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n\n    // Generate AI response\n    await generateResponse(content);\n  }, [messages, apiKey, isValidKey]);\n\n  // Clear all messages\n  const clearMessages = useCallback(() => {\n    setMessages([]);\n    setError(null);\n  }, []);\n  return {\n    messages,\n    isLoading,\n    error,\n    isTyping,\n    sendMessage,\n    clearMessages,\n    setError\n  };\n};\n_s(useChat, \"IYHc3cvhncdG4GokhSiUBT6TJNc=\", false, function () {\n  return [useGemini];\n});\nexport default useChat;","map":{"version":3,"names":["useState","useEffect","useCallback","generateChatResponse","useGemini","useChat","_s","messages","setMessages","isLoading","setIsLoading","error","setError","isTyping","setIsTyping","apiKey","isValidKey","generateResponse","userMessage","recentMessages","length","splice","response","botMessage","id","Date","now","toString","content","isUser","timestamp","prevMessages","err","message","sendMessage","trim","clearMessages"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/hooks/useChat.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { generateChatResponse } from '../services/geminiService';\r\nimport { useGemini } from './useGemini';\r\n\r\ninterface Message {\r\n  id: string;\r\n  content: string;\r\n  isUser: boolean;\r\n  timestamp: Date;\r\n}\r\n\r\nconst useChat = () => {\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const { apiKey, isValidKey } = useGemini();\r\n\r\n  // Clear error whenever messages change\r\n  useEffect(() => {\r\n    if (error) setError(null);\r\n  }, [messages, error]);\r\n\r\n  // Function to generate a response from Gemini\r\n  const generateResponse = async (userMessage: string) => {\r\n    if (!isValidKey || !apiKey) {\r\n      setError('Please set up your Gemini API key first.');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setIsTyping(true);\r\n    \r\n    try {\r\n      // Get the last few messages for context (including the latest user message)\r\n      const recentMessages = [...messages];\r\n      if (recentMessages.length > 10) {\r\n        // Limit context to last 10 messages to avoid token limits\r\n        recentMessages.splice(0, recentMessages.length - 10);\r\n      }\r\n\r\n      const response = await generateChatResponse(recentMessages, apiKey);\r\n\r\n      const botMessage: Message = {\r\n        id: Date.now().toString(),\r\n        content: response,\r\n        isUser: false,\r\n        timestamp: new Date()\r\n      };\r\n\r\n      setMessages(prevMessages => [...prevMessages, botMessage]);\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to get response from AI. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n      setIsTyping(false);\r\n    }\r\n  };\r\n\r\n  // Send message function (user messages)\r\n  const sendMessage = useCallback(async (content: string) => {\r\n    if (!content.trim()) return;\r\n\r\n    // Create user message\r\n    const userMessage: Message = {\r\n      id: Date.now().toString(),\r\n      content,\r\n      isUser: true,\r\n      timestamp: new Date()\r\n    };\r\n\r\n    // Add to messages\r\n    setMessages(prevMessages => [...prevMessages, userMessage]);\r\n\r\n    // Generate AI response\r\n    await generateResponse(content);\r\n  }, [messages, apiKey, isValidKey]);\r\n\r\n  // Clear all messages\r\n  const clearMessages = useCallback(() => {\r\n    setMessages([]);\r\n    setError(null);\r\n  }, []);\r\n\r\n  return {\r\n    messages,\r\n    isLoading,\r\n    error,\r\n    isTyping,\r\n    sendMessage,\r\n    clearMessages,\r\n    setError\r\n  };\r\n};\r\n\r\nexport default useChat; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}