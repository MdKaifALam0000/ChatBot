{"ast":null,"code":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Hardcoded API key\nconst API_KEY = \"AIzaSyAsdXIijrxubtnxPX6pSfXhwZnVc3N6HBw\";\n\n// Initialize the Gemini API client\nconst getGeminiClient = () => {\n  return new GoogleGenerativeAI(API_KEY);\n};\nexport const generateChatResponse = async messages => {\n  try {\n    const genAI = getGeminiClient();\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-pro\"\n    });\n\n    // Start a new chat\n    const chat = model.startChat();\n\n    // Send each message in sequence to maintain context\n    let response;\n    for (const msg of messages) {\n      response = await chat.sendMessage(msg.content);\n    }\n    if (!response) {\n      throw new Error('No response received from Gemini API');\n    }\n    const text = await response.response.text();\n    console.log('Received response from Gemini API:', text);\n    return text;\n  } catch (error) {\n    console.error('Error calling Gemini API:', error);\n    if (error.message) {\n      throw new Error(`Gemini API Error: ${error.message}`);\n    }\n    throw new Error('Failed to generate response. Please try again later.');\n  }\n};\n\n// Function for Gemini Pro Vision model (single message)\nexport const generateGemini2FlashResponse = async prompt => {\n  try {\n    const genAI = getGeminiClient();\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-pro\"\n    });\n    console.log('Sending request to Gemini Pro...');\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const text = response.text();\n    console.log('Received response from Gemini Pro API');\n    return text;\n  } catch (error) {\n    console.error('Error calling Gemini Pro API:', error);\n    if (error.message) {\n      throw new Error(`Gemini Pro API Error: ${error.message}`);\n    }\n    throw new Error('Failed to generate response from Gemini Pro. Please try again later.');\n  }\n};\n\n// Alternative implementation using fetch directly (similar to the curl command)\nexport const generateGemini2FlashResponseRaw = async prompt => {\n  try {\n    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${API_KEY}`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }]\n      })\n    });\n    if (!response.ok) {\n      var _error$error;\n      const error = await response.json();\n      throw new Error(((_error$error = error.error) === null || _error$error === void 0 ? void 0 : _error$error.message) || `API error: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.candidates[0].content.parts[0].text;\n  } catch (error) {\n    console.error('Error calling Gemini Pro API directly:', error);\n    if (error.message) {\n      throw new Error(`Gemini Pro API Error: ${error.message}`);\n    }\n    throw new Error('Failed to generate response from Gemini Pro. Please try again later.');\n  }\n};\nexport const validateGeminiKey = async () => {\n  try {\n    const genAI = getGeminiClient();\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-pro\"\n    });\n    console.log('Validating Gemini API key...');\n    const prompt = \"Hello, this is a test message to validate the API key.\";\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const text = response.text();\n    console.log('Key validation successful');\n    return {\n      isValid: true\n    };\n  } catch (error) {\n    console.error('API key validation error:', error);\n    let errorMessage = 'Invalid API key';\n    if (error.message) {\n      errorMessage = `Gemini API Error: ${error.message}`;\n    }\n    return {\n      isValid: false,\n      errorMessage\n    };\n  }\n};","map":{"version":3,"names":["GoogleGenerativeAI","API_KEY","getGeminiClient","generateChatResponse","messages","genAI","model","getGenerativeModel","chat","startChat","response","msg","sendMessage","content","Error","text","console","log","error","message","generateGemini2FlashResponse","prompt","result","generateContent","generateGemini2FlashResponseRaw","url","fetch","method","headers","body","JSON","stringify","contents","parts","ok","_error$error","json","status","data","candidates","validateGeminiKey","isValid","errorMessage"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/services/geminiService.ts"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\n// Hardcoded API key\r\nconst API_KEY = \"AIzaSyAsdXIijrxubtnxPX6pSfXhwZnVc3N6HBw\";\r\n\r\n// Initialize the Gemini API client\r\nconst getGeminiClient = () => {\r\n  return new GoogleGenerativeAI(API_KEY);\r\n};\r\n\r\nexport const generateChatResponse = async (\r\n  messages: { content: string; isUser: boolean }[]\r\n): Promise<string> => {\r\n  try {\r\n    const genAI = getGeminiClient();\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n\r\n    // Start a new chat\r\n    const chat = model.startChat();\r\n\r\n    // Send each message in sequence to maintain context\r\n    let response;\r\n    for (const msg of messages) {\r\n      response = await chat.sendMessage(msg.content);\r\n    }\r\n\r\n    if (!response) {\r\n      throw new Error('No response received from Gemini API');\r\n    }\r\n\r\n    const text = await response.response.text();\r\n    console.log('Received response from Gemini API:', text);\r\n    return text;\r\n  } catch (error: any) {\r\n    console.error('Error calling Gemini API:', error);\r\n    \r\n    if (error.message) {\r\n      throw new Error(`Gemini API Error: ${error.message}`);\r\n    }\r\n    \r\n    throw new Error('Failed to generate response. Please try again later.');\r\n  }\r\n};\r\n\r\n// Function for Gemini Pro Vision model (single message)\r\nexport const generateGemini2FlashResponse = async (\r\n  prompt: string\r\n): Promise<string> => {\r\n  try {\r\n    const genAI = getGeminiClient();\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n\r\n    console.log('Sending request to Gemini Pro...');\r\n    const result = await model.generateContent(prompt);\r\n    const response = await result.response;\r\n    const text = response.text();\r\n    \r\n    console.log('Received response from Gemini Pro API');\r\n    return text;\r\n  } catch (error: any) {\r\n    console.error('Error calling Gemini Pro API:', error);\r\n    \r\n    if (error.message) {\r\n      throw new Error(`Gemini Pro API Error: ${error.message}`);\r\n    }\r\n    \r\n    throw new Error('Failed to generate response from Gemini Pro. Please try again later.');\r\n  }\r\n};\r\n\r\n// Alternative implementation using fetch directly (similar to the curl command)\r\nexport const generateGemini2FlashResponseRaw = async (\r\n  prompt: string\r\n): Promise<string> => {\r\n  try {\r\n    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${API_KEY}`;\r\n    \r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        contents: [{\r\n          parts: [{ text: prompt }]\r\n        }]\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.json();\r\n      throw new Error(error.error?.message || `API error: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.candidates[0].content.parts[0].text;\r\n  } catch (error: any) {\r\n    console.error('Error calling Gemini Pro API directly:', error);\r\n    \r\n    if (error.message) {\r\n      throw new Error(`Gemini Pro API Error: ${error.message}`);\r\n    }\r\n    \r\n    throw new Error('Failed to generate response from Gemini Pro. Please try again later.');\r\n  }\r\n};\r\n\r\nexport const validateGeminiKey = async (): Promise<{isValid: boolean; errorMessage?: string}> => {\r\n  try {\r\n    const genAI = getGeminiClient();\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n\r\n    console.log('Validating Gemini API key...');\r\n    const prompt = \"Hello, this is a test message to validate the API key.\";\r\n    const result = await model.generateContent(prompt);\r\n    const response = await result.response;\r\n    const text = response.text();\r\n    \r\n    console.log('Key validation successful');\r\n    return {isValid: true};\r\n  } catch (error: any) {\r\n    console.error('API key validation error:', error);\r\n    \r\n    let errorMessage = 'Invalid API key';\r\n    if (error.message) {\r\n      errorMessage = `Gemini API Error: ${error.message}`;\r\n    }\r\n    \r\n    return {isValid: false, errorMessage};\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}