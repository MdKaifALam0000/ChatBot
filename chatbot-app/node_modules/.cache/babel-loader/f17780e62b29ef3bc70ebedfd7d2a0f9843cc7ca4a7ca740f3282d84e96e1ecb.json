{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alamk\\\\OneDrive\\\\Desktop\\\\Chatbot\\\\chatbot-app\\\\src\\\\contexts\\\\GeminiContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { validateGeminiKey } from '../services/geminiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeminiContext = /*#__PURE__*/createContext(undefined);\nexport const GeminiProvider = ({\n  children\n}) => {\n  _s();\n  const [apiKey, setApiKey] = useState('');\n  const [isKeyValid, setIsKeyValid] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const storedKey = localStorage.getItem('geminiApiKey');\n    if (storedKey) {\n      setApiKey(storedKey);\n      validateApiKey(storedKey);\n    }\n  }, []);\n  const validateApiKey = async key => {\n    if (!key) {\n      setIsKeyValid(false);\n      setError('API key is empty');\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      const {\n        isValid,\n        errorMessage\n      } = await validateGeminiKey(key);\n      setIsKeyValid(isValid);\n      if (!isValid && errorMessage) {\n        setError(errorMessage);\n      }\n    } catch (err) {\n      setIsKeyValid(false);\n      setError(err.message || 'Failed to validate API key');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSetApiKey = key => {\n    setApiKey(key);\n    localStorage.setItem('geminiApiKey', key);\n    validateApiKey(key);\n  };\n  const resetError = () => {\n    setError(null);\n  };\n  return /*#__PURE__*/_jsxDEV(GeminiContext.Provider, {\n    value: {\n      apiKey,\n      setApiKey: handleSetApiKey,\n      isKeyValid,\n      isLoading,\n      error,\n      resetError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(GeminiProvider, \"38NnucV9OT6KcnV7vW/0Bzm6Gg8=\");\n_c = GeminiProvider;\nexport const useGemini = () => {\n  _s2();\n  const context = useContext(GeminiContext);\n  if (context === undefined) {\n    throw new Error('useGemini must be used within a GeminiProvider');\n  }\n  return context;\n};\n_s2(useGemini, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"GeminiProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","validateGeminiKey","jsxDEV","_jsxDEV","GeminiContext","undefined","GeminiProvider","children","_s","apiKey","setApiKey","isKeyValid","setIsKeyValid","isLoading","setIsLoading","error","setError","storedKey","localStorage","getItem","validateApiKey","key","isValid","errorMessage","err","message","handleSetApiKey","setItem","resetError","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGemini","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/contexts/GeminiContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { validateGeminiKey } from '../services/geminiService';\r\n\r\ninterface GeminiContextType {\r\n  apiKey: string;\r\n  setApiKey: (key: string) => void;\r\n  isKeyValid: boolean;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  resetError: () => void;\r\n}\r\n\r\nconst GeminiContext = createContext<GeminiContextType | undefined>(undefined);\r\n\r\nexport const GeminiProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [apiKey, setApiKey] = useState<string>('');\r\n  const [isKeyValid, setIsKeyValid] = useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const storedKey = localStorage.getItem('geminiApiKey');\r\n    if (storedKey) {\r\n      setApiKey(storedKey);\r\n      validateApiKey(storedKey);\r\n    }\r\n  }, []);\r\n\r\n  const validateApiKey = async (key: string) => {\r\n    if (!key) {\r\n      setIsKeyValid(false);\r\n      setError('API key is empty');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const { isValid, errorMessage } = await validateGeminiKey(key);\r\n      setIsKeyValid(isValid);\r\n      if (!isValid && errorMessage) {\r\n        setError(errorMessage);\r\n      }\r\n    } catch (err: any) {\r\n      setIsKeyValid(false);\r\n      setError(err.message || 'Failed to validate API key');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSetApiKey = (key: string) => {\r\n    setApiKey(key);\r\n    localStorage.setItem('geminiApiKey', key);\r\n    validateApiKey(key);\r\n  };\r\n\r\n  const resetError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  return (\r\n    <GeminiContext.Provider\r\n      value={{\r\n        apiKey,\r\n        setApiKey: handleSetApiKey,\r\n        isKeyValid,\r\n        isLoading,\r\n        error,\r\n        resetError\r\n      }}\r\n    >\r\n      {children}\r\n    </GeminiContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useGemini = () => {\r\n  const context = useContext(GeminiContext);\r\n  if (context === undefined) {\r\n    throw new Error('useGemini must be used within a GeminiProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,iBAAiB,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAW9D,MAAMC,aAAa,gBAAGP,aAAa,CAAgCQ,SAAS,CAAC;AAE7E,OAAO,MAAMC,cAAuD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAS,EAAE,CAAC;EAChD,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAU,KAAK,CAAC;EAC5D,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAU,KAAK,CAAC;EAC1D,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAgB,IAAI,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACd,MAAMiB,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACtD,IAAIF,SAAS,EAAE;MACbP,SAAS,CAACO,SAAS,CAAC;MACpBG,cAAc,CAACH,SAAS,CAAC;IAC3B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,cAAc,GAAG,MAAOC,GAAW,IAAK;IAC5C,IAAI,CAACA,GAAG,EAAE;MACRT,aAAa,CAAC,KAAK,CAAC;MACpBI,QAAQ,CAAC,kBAAkB,CAAC;MAC5B;IACF;IAEAF,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAM;QAAEM,OAAO;QAAEC;MAAa,CAAC,GAAG,MAAMtB,iBAAiB,CAACoB,GAAG,CAAC;MAC9DT,aAAa,CAACU,OAAO,CAAC;MACtB,IAAI,CAACA,OAAO,IAAIC,YAAY,EAAE;QAC5BP,QAAQ,CAACO,YAAY,CAAC;MACxB;IACF,CAAC,CAAC,OAAOC,GAAQ,EAAE;MACjBZ,aAAa,CAAC,KAAK,CAAC;MACpBI,QAAQ,CAACQ,GAAG,CAACC,OAAO,IAAI,4BAA4B,CAAC;IACvD,CAAC,SAAS;MACRX,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMY,eAAe,GAAIL,GAAW,IAAK;IACvCX,SAAS,CAACW,GAAG,CAAC;IACdH,YAAY,CAACS,OAAO,CAAC,cAAc,EAAEN,GAAG,CAAC;IACzCD,cAAc,CAACC,GAAG,CAAC;EACrB,CAAC;EAED,MAAMO,UAAU,GAAGA,CAAA,KAAM;IACvBZ,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC;EAED,oBACEb,OAAA,CAACC,aAAa,CAACyB,QAAQ;IACrBC,KAAK,EAAE;MACLrB,MAAM;MACNC,SAAS,EAAEgB,eAAe;MAC1Bf,UAAU;MACVE,SAAS;MACTE,KAAK;MACLa;IACF,CAAE;IAAArB,QAAA,EAEDA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAAC1B,EAAA,CA9DWF,cAAuD;AAAA6B,EAAA,GAAvD7B,cAAuD;AAgEpE,OAAO,MAAM8B,SAAS,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC7B,MAAMC,OAAO,GAAGxC,UAAU,CAACM,aAAa,CAAC;EACzC,IAAIkC,OAAO,KAAKjC,SAAS,EAAE;IACzB,MAAM,IAAIkC,KAAK,CAAC,gDAAgD,CAAC;EACnE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,SAAS;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}