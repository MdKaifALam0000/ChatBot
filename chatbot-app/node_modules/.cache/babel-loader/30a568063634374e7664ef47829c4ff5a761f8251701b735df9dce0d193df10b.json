{"ast":null,"code":"import{io}from'socket.io-client';let socket=null;let isDemo=false;let messageCallbacks=[];// Connect to the socket server\nexport const connectSocket=token=>{// Check if this is a demo token\nif(token==='demo-token-1234567890'){isDemo=true;console.log('Connected to demo socket');return null;}try{if(!socket){socket=io('http://localhost:5000',{auth:{token}});}return socket;}catch(error){console.error('Socket connection error:',error);isDemo=true;// Fall back to demo mode\nreturn null;}};// Disconnect from the socket server\nexport const disconnectSocket=()=>{if(isDemo){isDemo=false;messageCallbacks=[];console.log('Disconnected from demo socket');return;}if(socket){socket.disconnect();socket=null;}};// Get the socket instance\nexport const getSocket=()=>{return socket;};// Join a chat room\nexport const joinRoom=roomId=>{if(isDemo){console.log(`Demo: Joined room ${roomId}`);return;}if(socket){socket.emit('join_room',roomId);}};// Send a message to the chatbot\nexport const sendMessage=message=>{if(isDemo){console.log(`Demo: Sent message - ${message}`);return;}if(socket){socket.emit('send_message',{content:message,timestamp:new Date()});}};// Listen for incoming messages\nexport const onReceiveMessage=callback=>{if(isDemo){// Store callback for demo mode\nmessageCallbacks.push(callback);return;}if(socket){socket.on('receive_message',callback);}};// Remove event listener\nexport const offReceiveMessage=()=>{if(isDemo){messageCallbacks=[];return;}if(socket){socket.off('receive_message');}};// For demo mode - trigger callbacks with a message\nexport const triggerDemoMessage=message=>{if(isDemo){messageCallbacks.forEach(callback=>callback(message));}};","map":{"version":3,"names":["io","socket","isDemo","messageCallbacks","connectSocket","token","console","log","auth","error","disconnectSocket","disconnect","getSocket","joinRoom","roomId","emit","sendMessage","message","content","timestamp","Date","onReceiveMessage","callback","push","on","offReceiveMessage","off","triggerDemoMessage","forEach"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/services/socketService.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\r\n\r\nlet socket: Socket | null = null;\r\nlet isDemo = false;\r\nlet messageCallbacks: Array<(message: any) => void> = [];\r\n\r\n// Connect to the socket server\r\nexport const connectSocket = (token: string): Socket | null => {\r\n  // Check if this is a demo token\r\n  if (token === 'demo-token-1234567890') {\r\n    isDemo = true;\r\n    console.log('Connected to demo socket');\r\n    return null;\r\n  }\r\n  \r\n  try {\r\n    if (!socket) {\r\n      socket = io('http://localhost:5000', {\r\n        auth: {\r\n          token\r\n        }\r\n      });\r\n    }\r\n    return socket;\r\n  } catch (error) {\r\n    console.error('Socket connection error:', error);\r\n    isDemo = true; // Fall back to demo mode\r\n    return null;\r\n  }\r\n};\r\n\r\n// Disconnect from the socket server\r\nexport const disconnectSocket = (): void => {\r\n  if (isDemo) {\r\n    isDemo = false;\r\n    messageCallbacks = [];\r\n    console.log('Disconnected from demo socket');\r\n    return;\r\n  }\r\n  \r\n  if (socket) {\r\n    socket.disconnect();\r\n    socket = null;\r\n  }\r\n};\r\n\r\n// Get the socket instance\r\nexport const getSocket = (): Socket | null => {\r\n  return socket;\r\n};\r\n\r\n// Join a chat room\r\nexport const joinRoom = (roomId: string): void => {\r\n  if (isDemo) {\r\n    console.log(`Demo: Joined room ${roomId}`);\r\n    return;\r\n  }\r\n  \r\n  if (socket) {\r\n    socket.emit('join_room', roomId);\r\n  }\r\n};\r\n\r\n// Send a message to the chatbot\r\nexport const sendMessage = (message: string): void => {\r\n  if (isDemo) {\r\n    console.log(`Demo: Sent message - ${message}`);\r\n    return;\r\n  }\r\n  \r\n  if (socket) {\r\n    socket.emit('send_message', { content: message, timestamp: new Date() });\r\n  }\r\n};\r\n\r\n// Listen for incoming messages\r\nexport const onReceiveMessage = (callback: (message: any) => void): void => {\r\n  if (isDemo) {\r\n    // Store callback for demo mode\r\n    messageCallbacks.push(callback);\r\n    return;\r\n  }\r\n  \r\n  if (socket) {\r\n    socket.on('receive_message', callback);\r\n  }\r\n};\r\n\r\n// Remove event listener\r\nexport const offReceiveMessage = (): void => {\r\n  if (isDemo) {\r\n    messageCallbacks = [];\r\n    return;\r\n  }\r\n  \r\n  if (socket) {\r\n    socket.off('receive_message');\r\n  }\r\n};\r\n\r\n// For demo mode - trigger callbacks with a message\r\nexport const triggerDemoMessage = (message: any): void => {\r\n  if (isDemo) {\r\n    messageCallbacks.forEach(callback => callback(message));\r\n  }\r\n}; "],"mappings":"AAAA,OAASA,EAAE,KAAgB,kBAAkB,CAE7C,GAAI,CAAAC,MAAqB,CAAG,IAAI,CAChC,GAAI,CAAAC,MAAM,CAAG,KAAK,CAClB,GAAI,CAAAC,gBAA+C,CAAG,EAAE,CAExD;AACA,MAAO,MAAM,CAAAC,aAAa,CAAIC,KAAa,EAAoB,CAC7D;AACA,GAAIA,KAAK,GAAK,uBAAuB,CAAE,CACrCH,MAAM,CAAG,IAAI,CACbI,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC,CACvC,MAAO,KAAI,CACb,CAEA,GAAI,CACF,GAAI,CAACN,MAAM,CAAE,CACXA,MAAM,CAAGD,EAAE,CAAC,uBAAuB,CAAE,CACnCQ,IAAI,CAAE,CACJH,KACF,CACF,CAAC,CAAC,CACJ,CACA,MAAO,CAAAJ,MAAM,CACf,CAAE,MAAOQ,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChDP,MAAM,CAAG,IAAI,CAAE;AACf,MAAO,KAAI,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAQ,gBAAgB,CAAGA,CAAA,GAAY,CAC1C,GAAIR,MAAM,CAAE,CACVA,MAAM,CAAG,KAAK,CACdC,gBAAgB,CAAG,EAAE,CACrBG,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAC5C,OACF,CAEA,GAAIN,MAAM,CAAE,CACVA,MAAM,CAACU,UAAU,CAAC,CAAC,CACnBV,MAAM,CAAG,IAAI,CACf,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAW,SAAS,CAAGA,CAAA,GAAqB,CAC5C,MAAO,CAAAX,MAAM,CACf,CAAC,CAED;AACA,MAAO,MAAM,CAAAY,QAAQ,CAAIC,MAAc,EAAW,CAChD,GAAIZ,MAAM,CAAE,CACVI,OAAO,CAACC,GAAG,CAAC,qBAAqBO,MAAM,EAAE,CAAC,CAC1C,OACF,CAEA,GAAIb,MAAM,CAAE,CACVA,MAAM,CAACc,IAAI,CAAC,WAAW,CAAED,MAAM,CAAC,CAClC,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,WAAW,CAAIC,OAAe,EAAW,CACpD,GAAIf,MAAM,CAAE,CACVI,OAAO,CAACC,GAAG,CAAC,wBAAwBU,OAAO,EAAE,CAAC,CAC9C,OACF,CAEA,GAAIhB,MAAM,CAAE,CACVA,MAAM,CAACc,IAAI,CAAC,cAAc,CAAE,CAAEG,OAAO,CAAED,OAAO,CAAEE,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAE,CAAC,CAAC,CAC1E,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,gBAAgB,CAAIC,QAAgC,EAAW,CAC1E,GAAIpB,MAAM,CAAE,CACV;AACAC,gBAAgB,CAACoB,IAAI,CAACD,QAAQ,CAAC,CAC/B,OACF,CAEA,GAAIrB,MAAM,CAAE,CACVA,MAAM,CAACuB,EAAE,CAAC,iBAAiB,CAAEF,QAAQ,CAAC,CACxC,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAG,iBAAiB,CAAGA,CAAA,GAAY,CAC3C,GAAIvB,MAAM,CAAE,CACVC,gBAAgB,CAAG,EAAE,CACrB,OACF,CAEA,GAAIF,MAAM,CAAE,CACVA,MAAM,CAACyB,GAAG,CAAC,iBAAiB,CAAC,CAC/B,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,kBAAkB,CAAIV,OAAY,EAAW,CACxD,GAAIf,MAAM,CAAE,CACVC,gBAAgB,CAACyB,OAAO,CAACN,QAAQ,EAAIA,QAAQ,CAACL,OAAO,CAAC,CAAC,CACzD,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}