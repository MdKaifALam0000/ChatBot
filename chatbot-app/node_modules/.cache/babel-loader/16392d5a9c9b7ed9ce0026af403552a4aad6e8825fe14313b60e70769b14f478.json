{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alamk\\\\OneDrive\\\\Desktop\\\\Chatbot\\\\chatbot-app\\\\src\\\\context\\\\GeminiContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { validateGeminiKey } from '../services/geminiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultValue = {\n  apiKey: '',\n  isValidKey: false,\n  isLoading: false,\n  error: null,\n  selectedModel: 'gemini-2.0-flash',\n  setApiKey: () => {},\n  setSelectedModel: () => {},\n  validateKey: async () => false,\n  resetError: () => {}\n};\nexport const GeminiContext = /*#__PURE__*/createContext(defaultValue);\nexport const useGemini = () => {\n  _s();\n  const context = useContext(GeminiContext);\n  if (!context) {\n    throw new Error('useGemini must be used within a GeminiProvider');\n  }\n  return context;\n};\n_s(useGemini, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const GeminiProvider = ({\n  children\n}) => {\n  _s2();\n  // Get API key from environment variable\n  const apiKeyFromEnv = process.env.REACT_APP_GEMINI_API_KEY || \"\";\n  const [apiKey, setApiKeyState] = useState(apiKeyFromEnv);\n  const [isValidKey, setIsValidKey] = useState(!!apiKeyFromEnv);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [selectedModel, setSelectedModel] = useState('gemini-2.0-flash');\n\n  // Validate the key when needed\n  const validateKey = async () => {\n    if (!apiKey) {\n      setIsValidKey(false);\n      setError(\"API key is required\");\n      return false;\n    }\n    setIsLoading(true);\n    try {\n      const result = await validateGeminiKey();\n      setIsValidKey(result.isValid);\n      setError(result.errorMessage || null);\n      return result.isValid;\n    } catch (err) {\n      setIsValidKey(false);\n      setError(err.message || \"Error validating API key\");\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Allow setting a custom API key\n  const setApiKey = key => {\n    setApiKeyState(key);\n    // Revalidate when key changes\n    if (key) {\n      validateKey();\n    } else {\n      setIsValidKey(false);\n      setError(\"API key is required\");\n    }\n  };\n  const resetError = () => {\n    setError(null);\n  };\n\n  // Validate key on initial load\n  useEffect(() => {\n    if (apiKey) {\n      validateKey();\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GeminiContext.Provider, {\n    value: {\n      apiKey,\n      isValidKey,\n      isLoading,\n      error,\n      selectedModel,\n      setApiKey,\n      setSelectedModel,\n      validateKey,\n      resetError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s2(GeminiProvider, \"WoIRaZ14lwYlRylSBi4axvJMtHI=\");\n_c = GeminiProvider;\nvar _c;\n$RefreshReg$(_c, \"GeminiProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","validateGeminiKey","jsxDEV","_jsxDEV","defaultValue","apiKey","isValidKey","isLoading","error","selectedModel","setApiKey","setSelectedModel","validateKey","resetError","GeminiContext","useGemini","_s","context","Error","GeminiProvider","children","_s2","apiKeyFromEnv","process","env","REACT_APP_GEMINI_API_KEY","setApiKeyState","setIsValidKey","setIsLoading","setError","result","isValid","errorMessage","err","message","key","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/context/GeminiContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, ReactNode, useContext } from 'react';\r\nimport { validateGeminiKey } from '../services/geminiService';\r\n\r\nexport type GeminiModelType = 'gemini-1.5-flash' | 'gemini-2.0-flash';\r\n\r\ninterface GeminiContextType {\r\n  apiKey: string;\r\n  isValidKey: boolean;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  selectedModel: GeminiModelType;\r\n  setApiKey: (key: string) => void;\r\n  setSelectedModel: (model: GeminiModelType) => void;\r\n  validateKey: () => Promise<boolean>;\r\n  resetError: () => void;\r\n}\r\n\r\nconst defaultValue: GeminiContextType = {\r\n  apiKey: '',\r\n  isValidKey: false,\r\n  isLoading: false,\r\n  error: null,\r\n  selectedModel: 'gemini-2.0-flash',\r\n  setApiKey: () => {},\r\n  setSelectedModel: () => {},\r\n  validateKey: async () => false,\r\n  resetError: () => {},\r\n};\r\n\r\nexport const GeminiContext = createContext<GeminiContextType>(defaultValue);\r\n\r\ninterface GeminiProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const useGemini = () => {\r\n  const context = useContext(GeminiContext);\r\n  \r\n  if (!context) {\r\n    throw new Error('useGemini must be used within a GeminiProvider');\r\n  }\r\n  \r\n  return context;\r\n};\r\n\r\nexport const GeminiProvider: React.FC<GeminiProviderProps> = ({ children }) => {\r\n  // Get API key from environment variable\r\n  const apiKeyFromEnv = process.env.REACT_APP_GEMINI_API_KEY || \"\";\r\n  const [apiKey, setApiKeyState] = useState<string>(apiKeyFromEnv);\r\n  const [isValidKey, setIsValidKey] = useState<boolean>(!!apiKeyFromEnv);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [selectedModel, setSelectedModel] = useState<GeminiModelType>('gemini-2.0-flash');\r\n\r\n  // Validate the key when needed\r\n  const validateKey = async (): Promise<boolean> => {\r\n    if (!apiKey) {\r\n      setIsValidKey(false);\r\n      setError(\"API key is required\");\r\n      return false;\r\n    }\r\n    \r\n    setIsLoading(true);\r\n    try {\r\n      const result = await validateGeminiKey();\r\n      setIsValidKey(result.isValid);\r\n      setError(result.errorMessage || null);\r\n      return result.isValid;\r\n    } catch (err: any) {\r\n      setIsValidKey(false);\r\n      setError(err.message || \"Error validating API key\");\r\n      return false;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Allow setting a custom API key\r\n  const setApiKey = (key: string) => {\r\n    setApiKeyState(key);\r\n    // Revalidate when key changes\r\n    if (key) {\r\n      validateKey();\r\n    } else {\r\n      setIsValidKey(false);\r\n      setError(\"API key is required\");\r\n    }\r\n  };\r\n\r\n  const resetError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  // Validate key on initial load\r\n  useEffect(() => {\r\n    if (apiKey) {\r\n      validateKey();\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <GeminiContext.Provider\r\n      value={{\r\n        apiKey,\r\n        isValidKey,\r\n        isLoading,\r\n        error,\r\n        selectedModel,\r\n        setApiKey,\r\n        setSelectedModel,\r\n        validateKey,\r\n        resetError,\r\n      }}\r\n    >\r\n      {children}\r\n    </GeminiContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}