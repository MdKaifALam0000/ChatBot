{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alamk\\\\OneDrive\\\\Desktop\\\\Chatbot\\\\chatbot-app\\\\src\\\\context\\\\OpenAIContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { validateOpenAIKey } from '../services/openaiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultValue = {\n  apiKey: '',\n  isValidKey: false,\n  isLoading: false,\n  error: null,\n  setApiKey: () => {},\n  validateKey: async () => false,\n  resetError: () => {}\n};\nexport const OpenAIContext = /*#__PURE__*/createContext(defaultValue);\nexport const OpenAIProvider = ({\n  children\n}) => {\n  _s();\n  const [apiKey, setApiKey] = useState(() => {\n    return localStorage.getItem('openai_api_key') || '';\n  });\n  const [isValidKey, setIsValidKey] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Validate API key when it changes\n  useEffect(() => {\n    const validateAPIKey = async () => {\n      if (!apiKey) {\n        setIsValidKey(false);\n        return;\n      }\n      setIsLoading(true);\n      setError(null);\n      try {\n        const validation = await validateOpenAIKey(apiKey);\n        setIsValidKey(validation.isValid);\n        if (validation.isValid) {\n          localStorage.setItem('openai_api_key', apiKey);\n        } else {\n          setError(validation.errorMessage || 'Invalid API key. Please check and try again.');\n        }\n      } catch (err) {\n        setError('Error validating API key. Please try again later.');\n        setIsValidKey(false);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (apiKey) {\n      validateAPIKey();\n    }\n  }, [apiKey]);\n  const validateKey = async () => {\n    if (!apiKey) {\n      setError('Please enter an API key');\n      return false;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      const validation = await validateOpenAIKey(apiKey);\n      setIsValidKey(validation.isValid);\n      if (validation.isValid) {\n        localStorage.setItem('openai_api_key', apiKey);\n        return true;\n      } else {\n        setError(validation.errorMessage || 'Invalid API key. Please check and try again.');\n        return false;\n      }\n    } catch (err) {\n      setError('Error validating API key. Please try again later.');\n      setIsValidKey(false);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const resetError = () => {\n    setError(null);\n  };\n  return /*#__PURE__*/_jsxDEV(OpenAIContext.Provider, {\n    value: {\n      apiKey,\n      isValidKey,\n      isLoading,\n      error,\n      setApiKey,\n      validateKey,\n      resetError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(OpenAIProvider, \"0CEnA2fFE4r/cghhElKSMcmDPm4=\");\n_c = OpenAIProvider;\nvar _c;\n$RefreshReg$(_c, \"OpenAIProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","validateOpenAIKey","jsxDEV","_jsxDEV","defaultValue","apiKey","isValidKey","isLoading","error","setApiKey","validateKey","resetError","OpenAIContext","OpenAIProvider","children","_s","localStorage","getItem","setIsValidKey","setIsLoading","setError","validateAPIKey","validation","isValid","setItem","errorMessage","err","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/context/OpenAIContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, ReactNode } from 'react';\r\nimport { validateOpenAIKey } from '../services/openaiService';\r\n\r\ninterface OpenAIContextType {\r\n  apiKey: string;\r\n  isValidKey: boolean;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  setApiKey: (key: string) => void;\r\n  validateKey: () => Promise<boolean>;\r\n  resetError: () => void;\r\n}\r\n\r\nconst defaultValue: OpenAIContextType = {\r\n  apiKey: '',\r\n  isValidKey: false,\r\n  isLoading: false,\r\n  error: null,\r\n  setApiKey: () => {},\r\n  validateKey: async () => false,\r\n  resetError: () => {},\r\n};\r\n\r\nexport const OpenAIContext = createContext<OpenAIContextType>(defaultValue);\r\n\r\ninterface OpenAIProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const OpenAIProvider: React.FC<OpenAIProviderProps> = ({ children }) => {\r\n  const [apiKey, setApiKey] = useState<string>(() => {\r\n    return localStorage.getItem('openai_api_key') || '';\r\n  });\r\n  const [isValidKey, setIsValidKey] = useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Validate API key when it changes\r\n  useEffect(() => {\r\n    const validateAPIKey = async () => {\r\n      if (!apiKey) {\r\n        setIsValidKey(false);\r\n        return;\r\n      }\r\n\r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        const validation = await validateOpenAIKey(apiKey);\r\n        setIsValidKey(validation.isValid);\r\n        \r\n        if (validation.isValid) {\r\n          localStorage.setItem('openai_api_key', apiKey);\r\n        } else {\r\n          setError(validation.errorMessage || 'Invalid API key. Please check and try again.');\r\n        }\r\n      } catch (err) {\r\n        setError('Error validating API key. Please try again later.');\r\n        setIsValidKey(false);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    if (apiKey) {\r\n      validateAPIKey();\r\n    }\r\n  }, [apiKey]);\r\n\r\n  const validateKey = async (): Promise<boolean> => {\r\n    if (!apiKey) {\r\n      setError('Please enter an API key');\r\n      return false;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const validation = await validateOpenAIKey(apiKey);\r\n      setIsValidKey(validation.isValid);\r\n      \r\n      if (validation.isValid) {\r\n        localStorage.setItem('openai_api_key', apiKey);\r\n        return true;\r\n      } else {\r\n        setError(validation.errorMessage || 'Invalid API key. Please check and try again.');\r\n        return false;\r\n      }\r\n    } catch (err) {\r\n      setError('Error validating API key. Please try again later.');\r\n      setIsValidKey(false);\r\n      return false;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const resetError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  return (\r\n    <OpenAIContext.Provider\r\n      value={{\r\n        apiKey,\r\n        isValidKey,\r\n        isLoading,\r\n        error,\r\n        setApiKey,\r\n        validateKey,\r\n        resetError,\r\n      }}\r\n    >\r\n      {children}\r\n    </OpenAIContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}