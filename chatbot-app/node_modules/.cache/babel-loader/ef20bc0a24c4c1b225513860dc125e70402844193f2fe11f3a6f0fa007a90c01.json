{"ast":null,"code":"import axios from 'axios';\n\n// API URL (should be in .env file in production)\nconst API_URL = 'http://localhost:5000/api';\n\n// Demo message history\nconst DEMO_HISTORY = [{\n  _id: '1',\n  content: 'Hello! Welcome to the chatbot application.',\n  isUser: false,\n  timestamp: new Date(Date.now() - 86400000) // 1 day ago\n}, {\n  _id: '2',\n  content: 'How can I help you today?',\n  isUser: false,\n  timestamp: new Date(Date.now() - 86400000 + 30000) // 1 day ago + 30 seconds\n}, {\n  _id: '3',\n  content: 'I\\'d like to know more about your services.',\n  isUser: true,\n  timestamp: new Date(Date.now() - 3600000) // 1 hour ago\n}, {\n  _id: '4',\n  content: 'We offer a variety of AI-powered chat solutions for businesses and individuals. Our services include customer support automation, virtual assistants, and conversational AI interfaces.',\n  isUser: false,\n  timestamp: new Date(Date.now() - 3600000 + 10000) // 1 hour ago + 10 seconds\n}];\n\n// Check if a token is a demo token\nconst isDemoToken = token => {\n  return token === 'demo-token-1234567890';\n};\n\n// Get chat history\nexport const getChatHistory = async token => {\n  if (isDemoToken(token)) {\n    // Return demo data with a small delay to simulate network request\n    await new Promise(resolve => setTimeout(resolve, 800));\n    return DEMO_HISTORY;\n  }\n  try {\n    const config = {\n      headers: {\n        'x-auth-token': token\n      }\n    };\n    const response = await axios.get(`${API_URL}/messages/history`, config);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching chat history:', error);\n    // Fall back to demo data if request fails\n    return DEMO_HISTORY;\n  }\n};\n\n// Get user profile\nexport const getUserProfile = async token => {\n  if (isDemoToken(token)) {\n    // Return demo data with a small delay to simulate network request\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      _id: '1234567890',\n      username: 'demouser',\n      email: 'demo@example.com'\n    };\n  }\n  try {\n    const config = {\n      headers: {\n        'x-auth-token': token\n      }\n    };\n    const response = await axios.get(`${API_URL}/users/me`, config);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user profile:', error);\n    throw error;\n  }\n};\n\n// Update user profile\nexport const updateUserProfile = async (token, userData) => {\n  if (isDemoToken(token)) {\n    // Return demo data with a small delay to simulate network request\n    await new Promise(resolve => setTimeout(resolve, 700));\n    return {\n      ...userData,\n      _id: '1234567890'\n    };\n  }\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': token\n      }\n    };\n    const response = await axios.put(`${API_URL}/users/me`, userData, config);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating user profile:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","DEMO_HISTORY","_id","content","isUser","timestamp","Date","now","isDemoToken","token","getChatHistory","Promise","resolve","setTimeout","config","headers","response","get","data","error","console","getUserProfile","username","email","updateUserProfile","userData","put"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/services/apiService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// API URL (should be in .env file in production)\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Demo message history\r\nconst DEMO_HISTORY = [\r\n  {\r\n    _id: '1',\r\n    content: 'Hello! Welcome to the chatbot application.',\r\n    isUser: false,\r\n    timestamp: new Date(Date.now() - 86400000) // 1 day ago\r\n  },\r\n  {\r\n    _id: '2',\r\n    content: 'How can I help you today?',\r\n    isUser: false,\r\n    timestamp: new Date(Date.now() - 86400000 + 30000) // 1 day ago + 30 seconds\r\n  },\r\n  {\r\n    _id: '3',\r\n    content: 'I\\'d like to know more about your services.',\r\n    isUser: true,\r\n    timestamp: new Date(Date.now() - 3600000) // 1 hour ago\r\n  },\r\n  {\r\n    _id: '4',\r\n    content: 'We offer a variety of AI-powered chat solutions for businesses and individuals. Our services include customer support automation, virtual assistants, and conversational AI interfaces.',\r\n    isUser: false,\r\n    timestamp: new Date(Date.now() - 3600000 + 10000) // 1 hour ago + 10 seconds\r\n  }\r\n];\r\n\r\n// Check if a token is a demo token\r\nconst isDemoToken = (token: string): boolean => {\r\n  return token === 'demo-token-1234567890';\r\n};\r\n\r\n// Get chat history\r\nexport const getChatHistory = async (token: string) => {\r\n  if (isDemoToken(token)) {\r\n    // Return demo data with a small delay to simulate network request\r\n    await new Promise(resolve => setTimeout(resolve, 800));\r\n    return DEMO_HISTORY;\r\n  }\r\n  \r\n  try {\r\n    const config = {\r\n      headers: {\r\n        'x-auth-token': token\r\n      }\r\n    };\r\n    const response = await axios.get(`${API_URL}/messages/history`, config);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching chat history:', error);\r\n    // Fall back to demo data if request fails\r\n    return DEMO_HISTORY;\r\n  }\r\n};\r\n\r\n// Get user profile\r\nexport const getUserProfile = async (token: string) => {\r\n  if (isDemoToken(token)) {\r\n    // Return demo data with a small delay to simulate network request\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    return {\r\n      _id: '1234567890',\r\n      username: 'demouser',\r\n      email: 'demo@example.com'\r\n    };\r\n  }\r\n  \r\n  try {\r\n    const config = {\r\n      headers: {\r\n        'x-auth-token': token\r\n      }\r\n    };\r\n    const response = await axios.get(`${API_URL}/users/me`, config);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching user profile:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update user profile\r\nexport const updateUserProfile = async (token: string, userData: any) => {\r\n  if (isDemoToken(token)) {\r\n    // Return demo data with a small delay to simulate network request\r\n    await new Promise(resolve => setTimeout(resolve, 700));\r\n    return {\r\n      ...userData,\r\n      _id: '1234567890'\r\n    };\r\n  }\r\n  \r\n  try {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'x-auth-token': token\r\n      }\r\n    };\r\n    const response = await axios.put(`${API_URL}/users/me`, userData, config);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error updating user profile:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}