{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\nimport { connectSocket, sendMessage, onReceiveMessage, offReceiveMessage, disconnectSocket } from '../services/socketService';\nimport { getChatHistory } from '../services/apiService';\nexport const useChat = () => {\n  _s();\n  const {\n    token,\n    user\n  } = useContext(AuthContext);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initialize chat and load history\n  useEffect(() => {\n    if (!token) return;\n    const initializeChat = async () => {\n      try {\n        setLoading(true);\n        connectSocket(token);\n\n        // Load chat history\n        const history = await getChatHistory(token);\n        setMessages(history);\n        setError(null);\n      } catch (err) {\n        console.error('Error initializing chat:', err);\n        setError('Failed to load chat history');\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeChat();\n\n    // Clean up on unmount\n    return () => {\n      offReceiveMessage();\n      disconnectSocket();\n    };\n  }, [token]);\n\n  // Listen for incoming messages\n  useEffect(() => {\n    if (!token) return;\n    const handleIncomingMessage = message => {\n      setMessages(prevMessages => [...prevMessages, message]);\n    };\n    onReceiveMessage(handleIncomingMessage);\n\n    // Clean up listener on unmount\n    return () => {\n      offReceiveMessage();\n    };\n  }, [token]);\n\n  // Send message function\n  const sendChatMessage = useCallback(content => {\n    if (!content.trim()) return;\n\n    // Create a temporary message to display immediately\n    const tempMessage = {\n      _id: Date.now().toString(),\n      content,\n      isUser: true,\n      timestamp: new Date()\n    };\n\n    // Add to messages state\n    setMessages(prev => [...prev, tempMessage]);\n\n    // Send via socket\n    sendMessage(content);\n  }, []);\n\n  // Add a welcome message if chat is empty\n  useEffect(() => {\n    if (!loading && messages.length === 0) {\n      setMessages([{\n        _id: 'welcome',\n        content: `Hello${user ? ' ' + user.username : ''}! How can I assist you today?`,\n        isUser: false,\n        timestamp: new Date()\n      }]);\n    }\n  }, [loading, messages.length, user]);\n  return {\n    messages,\n    loading,\n    error,\n    sendMessage: sendChatMessage\n  };\n};\n_s(useChat, \"tRGuWS1nWv74sIBstVu/YmSdUK4=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useContext","AuthContext","connectSocket","sendMessage","onReceiveMessage","offReceiveMessage","disconnectSocket","getChatHistory","useChat","_s","token","user","messages","setMessages","loading","setLoading","error","setError","initializeChat","history","err","console","handleIncomingMessage","message","prevMessages","sendChatMessage","content","trim","tempMessage","_id","Date","now","toString","isUser","timestamp","prev","length","username"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/hooks/useChat.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useContext } from 'react';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport { connectSocket, sendMessage, onReceiveMessage, offReceiveMessage, disconnectSocket } from '../services/socketService';\r\nimport { getChatHistory } from '../services/apiService';\r\n\r\ninterface Message {\r\n  _id: string;\r\n  content: string;\r\n  isUser: boolean;\r\n  timestamp: Date;\r\n}\r\n\r\nexport const useChat = () => {\r\n  const { token, user } = useContext(AuthContext);\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Initialize chat and load history\r\n  useEffect(() => {\r\n    if (!token) return;\r\n\r\n    const initializeChat = async () => {\r\n      try {\r\n        setLoading(true);\r\n        connectSocket(token);\r\n        \r\n        // Load chat history\r\n        const history = await getChatHistory(token);\r\n        setMessages(history);\r\n        setError(null);\r\n      } catch (err) {\r\n        console.error('Error initializing chat:', err);\r\n        setError('Failed to load chat history');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeChat();\r\n\r\n    // Clean up on unmount\r\n    return () => {\r\n      offReceiveMessage();\r\n      disconnectSocket();\r\n    };\r\n  }, [token]);\r\n\r\n  // Listen for incoming messages\r\n  useEffect(() => {\r\n    if (!token) return;\r\n\r\n    const handleIncomingMessage = (message: Message) => {\r\n      setMessages((prevMessages) => [...prevMessages, message]);\r\n    };\r\n\r\n    onReceiveMessage(handleIncomingMessage);\r\n\r\n    // Clean up listener on unmount\r\n    return () => {\r\n      offReceiveMessage();\r\n    };\r\n  }, [token]);\r\n\r\n  // Send message function\r\n  const sendChatMessage = useCallback((content: string) => {\r\n    if (!content.trim()) return;\r\n\r\n    // Create a temporary message to display immediately\r\n    const tempMessage: Message = {\r\n      _id: Date.now().toString(),\r\n      content,\r\n      isUser: true,\r\n      timestamp: new Date(),\r\n    };\r\n\r\n    // Add to messages state\r\n    setMessages((prev) => [...prev, tempMessage]);\r\n\r\n    // Send via socket\r\n    sendMessage(content);\r\n  }, []);\r\n\r\n  // Add a welcome message if chat is empty\r\n  useEffect(() => {\r\n    if (!loading && messages.length === 0) {\r\n      setMessages([\r\n        {\r\n          _id: 'welcome',\r\n          content: `Hello${user ? ' ' + user.username : ''}! How can I assist you today?`,\r\n          isUser: false,\r\n          timestamp: new Date(),\r\n        },\r\n      ]);\r\n    }\r\n  }, [loading, messages.length, user]);\r\n\r\n  return {\r\n    messages,\r\n    loading,\r\n    error,\r\n    sendMessage: sendChatMessage,\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}