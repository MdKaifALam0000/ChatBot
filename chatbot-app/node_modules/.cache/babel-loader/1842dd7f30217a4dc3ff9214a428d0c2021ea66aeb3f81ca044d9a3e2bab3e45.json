{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import{generateChatResponse}from'../services/openaiService';import{useOpenAI}from'./useOpenAI';const useChat=()=>{const[messages,setMessages]=useState([]);const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState(null);const[isTyping,setIsTyping]=useState(false);const{apiKey,isValidKey}=useOpenAI();// Clear error whenever messages change\nuseEffect(()=>{if(error)setError(null);},[messages,error]);// Function to generate a response from OpenAI\nconst generateResponse=async userMessage=>{if(!isValidKey||!apiKey){setError('Please set up your OpenAI API key first.');return;}setIsLoading(true);setIsTyping(true);try{// Get the last few messages for context (including the latest user message)\nconst recentMessages=[...messages];if(recentMessages.length>10){// Limit context to last 10 messages to avoid token limits\nrecentMessages.splice(0,recentMessages.length-10);}const response=await generateChatResponse(recentMessages,apiKey);const botMessage={id:Date.now().toString(),content:response,isUser:false,timestamp:new Date()};setMessages(prevMessages=>[...prevMessages,botMessage]);}catch(err){setError(err.message||'Failed to get response from AI. Please try again.');}finally{setIsLoading(false);setIsTyping(false);}};// Send message function (user messages)\nconst sendMessage=useCallback(async content=>{if(!content.trim())return;// Create user message\nconst userMessage={id:Date.now().toString(),content,isUser:true,timestamp:new Date()};// Add to messages\nsetMessages(prevMessages=>[...prevMessages,userMessage]);// Generate AI response\nawait generateResponse(content);},[generateResponse]);// Clear all messages\nconst clearMessages=useCallback(()=>{setMessages([]);setError(null);},[]);return{messages,isLoading,error,isTyping,sendMessage,clearMessages,setError};};export default useChat;","map":{"version":3,"names":["useState","useEffect","useCallback","generateChatResponse","useOpenAI","useChat","messages","setMessages","isLoading","setIsLoading","error","setError","isTyping","setIsTyping","apiKey","isValidKey","generateResponse","userMessage","recentMessages","length","splice","response","botMessage","id","Date","now","toString","content","isUser","timestamp","prevMessages","err","message","sendMessage","trim","clearMessages"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/hooks/useChat.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { generateChatResponse } from '../services/openaiService';\r\nimport { useOpenAI } from './useOpenAI';\r\n\r\ninterface Message {\r\n  id: string;\r\n  content: string;\r\n  isUser: boolean;\r\n  timestamp: Date;\r\n}\r\n\r\nconst useChat = () => {\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const { apiKey, isValidKey } = useOpenAI();\r\n\r\n  // Clear error whenever messages change\r\n  useEffect(() => {\r\n    if (error) setError(null);\r\n  }, [messages, error]);\r\n\r\n  // Function to generate a response from OpenAI\r\n  const generateResponse = async (userMessage: string) => {\r\n    if (!isValidKey || !apiKey) {\r\n      setError('Please set up your OpenAI API key first.');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setIsTyping(true);\r\n    \r\n    try {\r\n      // Get the last few messages for context (including the latest user message)\r\n      const recentMessages = [...messages];\r\n      if (recentMessages.length > 10) {\r\n        // Limit context to last 10 messages to avoid token limits\r\n        recentMessages.splice(0, recentMessages.length - 10);\r\n      }\r\n\r\n      const response = await generateChatResponse(recentMessages, apiKey);\r\n\r\n      const botMessage: Message = {\r\n        id: Date.now().toString(),\r\n        content: response,\r\n        isUser: false,\r\n        timestamp: new Date()\r\n      };\r\n\r\n      setMessages(prevMessages => [...prevMessages, botMessage]);\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to get response from AI. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n      setIsTyping(false);\r\n    }\r\n  };\r\n\r\n  // Send message function (user messages)\r\n  const sendMessage = useCallback(async (content: string) => {\r\n    if (!content.trim()) return;\r\n\r\n    // Create user message\r\n    const userMessage: Message = {\r\n      id: Date.now().toString(),\r\n      content,\r\n      isUser: true,\r\n      timestamp: new Date()\r\n    };\r\n\r\n    // Add to messages\r\n    setMessages(prevMessages => [...prevMessages, userMessage]);\r\n\r\n    // Generate AI response\r\n    await generateResponse(content);\r\n  }, [generateResponse]);\r\n\r\n  // Clear all messages\r\n  const clearMessages = useCallback(() => {\r\n    setMessages([]);\r\n    setError(null);\r\n  }, []);\r\n\r\n  return {\r\n    messages,\r\n    isLoading,\r\n    error,\r\n    isTyping,\r\n    sendMessage,\r\n    clearMessages,\r\n    setError\r\n  };\r\n};\r\n\r\nexport default useChat; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}