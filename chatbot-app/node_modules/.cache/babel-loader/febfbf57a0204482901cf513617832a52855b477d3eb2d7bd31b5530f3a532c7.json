{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alamk\\\\OneDrive\\\\Desktop\\\\Chatbot\\\\chatbot-app\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Demo user for testing\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEMO_USER = {\n  _id: '1234567890',\n  username: 'demouser',\n  email: 'demo@example.com',\n  password: 'password123' // In a real app, never store passwords in plain text\n};\nconst defaultValue = {\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  loading: true,\n  login: async () => {},\n  register: async () => {},\n  logout: () => {},\n  error: null\n};\nexport const AuthContext = /*#__PURE__*/createContext(defaultValue);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // API URL (should be set in .env in production)\n  const API_URL = 'http://localhost:5000/api';\n\n  // Set auth token for all requests\n  const setAuthToken = token => {\n    if (token) {\n      axios.defaults.headers.common['x-auth-token'] = token;\n      localStorage.setItem('token', token);\n    } else {\n      delete axios.defaults.headers.common['x-auth-token'];\n      localStorage.removeItem('token');\n    }\n  };\n\n  // Load user on initial load\n  useEffect(() => {\n    const loadUser = async () => {\n      if (token) {\n        setAuthToken(token);\n        try {\n          // Check if token is the demo token\n          if (token === 'demo-token-1234567890') {\n            setUser({\n              _id: DEMO_USER._id,\n              username: DEMO_USER.username,\n              email: DEMO_USER.email\n            });\n            setIsAuthenticated(true);\n          } else {\n            // Try to get user from API\n            try {\n              const res = await axios.get(`${API_URL}/users/me`);\n              setUser(res.data);\n              setIsAuthenticated(true);\n            } catch (err) {\n              // If API request fails, fall back to demo login\n              const savedEmail = localStorage.getItem('user_email');\n              if (savedEmail === DEMO_USER.email) {\n                setUser({\n                  _id: DEMO_USER._id,\n                  username: DEMO_USER.username,\n                  email: DEMO_USER.email\n                });\n                setIsAuthenticated(true);\n              } else {\n                setToken(null);\n                setUser(null);\n                setIsAuthenticated(false);\n                setAuthToken(null);\n              }\n            }\n          }\n        } catch (err) {\n          setToken(null);\n          setUser(null);\n          setIsAuthenticated(false);\n          setAuthToken(null);\n        }\n      }\n      setLoading(false);\n    };\n    loadUser();\n  }, [token]);\n\n  // Login user\n  const login = async (email, password) => {\n    try {\n      setError(null);\n\n      // Check for demo credentials\n      if (email === DEMO_USER.email && password === DEMO_USER.password) {\n        const demoToken = 'demo-token-1234567890';\n        setToken(demoToken);\n        setAuthToken(demoToken);\n        setIsAuthenticated(true);\n        setUser({\n          _id: DEMO_USER._id,\n          username: DEMO_USER.username,\n          email: DEMO_USER.email\n        });\n        localStorage.setItem('user_email', email);\n        return;\n      }\n\n      // Try API login if not demo\n      try {\n        const res = await axios.post(`${API_URL}/auth/login`, {\n          email,\n          password\n        });\n        setToken(res.data.token);\n        setAuthToken(res.data.token);\n        setIsAuthenticated(true);\n        setUser(res.data.user);\n      } catch (err) {\n        var _err$response, _err$response$data;\n        throw new Error(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Login failed. Please check your credentials.');\n      }\n    } catch (err) {\n      setError(err.message || 'An error occurred during login');\n      setToken(null);\n      setUser(null);\n      setIsAuthenticated(false);\n      setAuthToken(null);\n    }\n  };\n\n  // Register user\n  const register = async (username, email, password) => {\n    try {\n      setError(null);\n\n      // Always allow registration with demo credentials\n      if (email === DEMO_USER.email) {\n        const demoToken = 'demo-token-1234567890';\n        setToken(demoToken);\n        setAuthToken(demoToken);\n        setIsAuthenticated(true);\n        setUser({\n          _id: DEMO_USER._id,\n          username: username || DEMO_USER.username,\n          email: DEMO_USER.email\n        });\n        localStorage.setItem('user_email', email);\n        return;\n      }\n\n      // Try API registration if not demo\n      try {\n        const res = await axios.post(`${API_URL}/auth/register`, {\n          username,\n          email,\n          password\n        });\n        setToken(res.data.token);\n        setAuthToken(res.data.token);\n        setIsAuthenticated(true);\n        setUser(res.data.user);\n      } catch (err) {\n        var _err$response2, _err$response2$data;\n        throw new Error(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Registration failed. Please try again.');\n      }\n    } catch (err) {\n      setError(err.message || 'An error occurred during registration');\n      setToken(null);\n      setUser(null);\n      setIsAuthenticated(false);\n      setAuthToken(null);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    setToken(null);\n    setUser(null);\n    setIsAuthenticated(false);\n    setAuthToken(null);\n    localStorage.removeItem('user_email');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      isAuthenticated,\n      loading,\n      login,\n      register,\n      logout,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"/pZaRFubARYM1rf4SgtNFhnoEWM=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","DEMO_USER","_id","username","email","password","defaultValue","user","token","isAuthenticated","loading","login","register","logout","error","AuthContext","AuthProvider","children","_s","setUser","setToken","localStorage","getItem","setIsAuthenticated","setLoading","setError","API_URL","setAuthToken","defaults","headers","common","setItem","removeItem","loadUser","res","get","data","err","savedEmail","demoToken","post","_err$response","_err$response$data","Error","response","message","_err$response2","_err$response2$data","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, ReactNode } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Demo user for testing\r\nconst DEMO_USER = {\r\n  _id: '1234567890',\r\n  username: 'demouser',\r\n  email: 'demo@example.com',\r\n  password: 'password123' // In a real app, never store passwords in plain text\r\n};\r\n\r\ninterface User {\r\n  _id: string;\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  token: string | null;\r\n  isAuthenticated: boolean;\r\n  loading: boolean;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  register: (username: string, email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  error: string | null;\r\n}\r\n\r\nconst defaultValue: AuthContextType = {\r\n  user: null,\r\n  token: null,\r\n  isAuthenticated: false,\r\n  loading: true,\r\n  login: async () => {},\r\n  register: async () => {},\r\n  logout: () => {},\r\n  error: null,\r\n};\r\n\r\nexport const AuthContext = createContext<AuthContextType>(defaultValue);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [token, setToken] = useState<string | null>(localStorage.getItem('token'));\r\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // API URL (should be set in .env in production)\r\n  const API_URL = 'http://localhost:5000/api';\r\n\r\n  // Set auth token for all requests\r\n  const setAuthToken = (token: string | null) => {\r\n    if (token) {\r\n      axios.defaults.headers.common['x-auth-token'] = token;\r\n      localStorage.setItem('token', token);\r\n    } else {\r\n      delete axios.defaults.headers.common['x-auth-token'];\r\n      localStorage.removeItem('token');\r\n    }\r\n  };\r\n\r\n  // Load user on initial load\r\n  useEffect(() => {\r\n    const loadUser = async () => {\r\n      if (token) {\r\n        setAuthToken(token);\r\n        try {\r\n          // Check if token is the demo token\r\n          if (token === 'demo-token-1234567890') {\r\n            setUser({\r\n              _id: DEMO_USER._id,\r\n              username: DEMO_USER.username,\r\n              email: DEMO_USER.email\r\n            });\r\n            setIsAuthenticated(true);\r\n          } else {\r\n            // Try to get user from API\r\n            try {\r\n              const res = await axios.get(`${API_URL}/users/me`);\r\n              setUser(res.data);\r\n              setIsAuthenticated(true);\r\n            } catch (err) {\r\n              // If API request fails, fall back to demo login\r\n              const savedEmail = localStorage.getItem('user_email');\r\n              if (savedEmail === DEMO_USER.email) {\r\n                setUser({\r\n                  _id: DEMO_USER._id,\r\n                  username: DEMO_USER.username,\r\n                  email: DEMO_USER.email\r\n                });\r\n                setIsAuthenticated(true);\r\n              } else {\r\n                setToken(null);\r\n                setUser(null);\r\n                setIsAuthenticated(false);\r\n                setAuthToken(null);\r\n              }\r\n            }\r\n          }\r\n        } catch (err) {\r\n          setToken(null);\r\n          setUser(null);\r\n          setIsAuthenticated(false);\r\n          setAuthToken(null);\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    loadUser();\r\n  }, [token]);\r\n\r\n  // Login user\r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      // Check for demo credentials\r\n      if (email === DEMO_USER.email && password === DEMO_USER.password) {\r\n        const demoToken = 'demo-token-1234567890';\r\n        setToken(demoToken);\r\n        setAuthToken(demoToken);\r\n        setIsAuthenticated(true);\r\n        setUser({\r\n          _id: DEMO_USER._id,\r\n          username: DEMO_USER.username,\r\n          email: DEMO_USER.email\r\n        });\r\n        localStorage.setItem('user_email', email);\r\n        return;\r\n      }\r\n      \r\n      // Try API login if not demo\r\n      try {\r\n        const res = await axios.post(`${API_URL}/auth/login`, { email, password });\r\n        setToken(res.data.token);\r\n        setAuthToken(res.data.token);\r\n        setIsAuthenticated(true);\r\n        setUser(res.data.user);\r\n      } catch (err) {\r\n        throw new Error(err.response?.data?.message || 'Login failed. Please check your credentials.');\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.message || 'An error occurred during login');\r\n      setToken(null);\r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n      setAuthToken(null);\r\n    }\r\n  };\r\n\r\n  // Register user\r\n  const register = async (username: string, email: string, password: string) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      // Always allow registration with demo credentials\r\n      if (email === DEMO_USER.email) {\r\n        const demoToken = 'demo-token-1234567890';\r\n        setToken(demoToken);\r\n        setAuthToken(demoToken);\r\n        setIsAuthenticated(true);\r\n        setUser({\r\n          _id: DEMO_USER._id,\r\n          username: username || DEMO_USER.username,\r\n          email: DEMO_USER.email\r\n        });\r\n        localStorage.setItem('user_email', email);\r\n        return;\r\n      }\r\n      \r\n      // Try API registration if not demo\r\n      try {\r\n        const res = await axios.post(`${API_URL}/auth/register`, { username, email, password });\r\n        setToken(res.data.token);\r\n        setAuthToken(res.data.token);\r\n        setIsAuthenticated(true);\r\n        setUser(res.data.user);\r\n      } catch (err) {\r\n        throw new Error(err.response?.data?.message || 'Registration failed. Please try again.');\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.message || 'An error occurred during registration');\r\n      setToken(null);\r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n      setAuthToken(null);\r\n    }\r\n  };\r\n\r\n  // Logout user\r\n  const logout = () => {\r\n    setToken(null);\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    setAuthToken(null);\r\n    localStorage.removeItem('user_email');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        token,\r\n        isAuthenticated,\r\n        loading,\r\n        login,\r\n        register,\r\n        logout,\r\n        error,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}