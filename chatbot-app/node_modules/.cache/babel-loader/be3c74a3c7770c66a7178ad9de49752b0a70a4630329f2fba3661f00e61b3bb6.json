{"ast":null,"code":"import axios from'axios';// OpenAI API configuration\nconst OPENAI_API_URL='https://api.openai.com/v1/chat/completions';export const generateChatResponse=async(messages,apiKey)=>{if(!apiKey){throw new Error('No OpenAI API key provided');}try{// Convert messages to OpenAI format\nconst formattedMessages=[{role:'system',content:'You are a helpful AI assistant. Provide concise and accurate responses to user questions.'},...messages.map(msg=>({role:msg.isUser?'user':'assistant',content:msg.content}))];const requestBody={model:'gpt-3.5-turbo',// You can upgrade to gpt-4 if available\nmessages:formattedMessages,max_tokens:1000,temperature:0.7};const response=await axios.post(OPENAI_API_URL,requestBody,{headers:{'Content-Type':'application/json','Authorization':`Bearer ${apiKey}`}});if(response.data&&response.data.choices&&response.data.choices.length>0){return response.data.choices[0].message.content.trim();}else{throw new Error('No response from OpenAI');}}catch(error){console.error('Error calling OpenAI API:',error);// Return a friendly error message or the specific error from OpenAI\nif(error.response&&error.response.data&&error.response.data.error){throw new Error(`OpenAI API Error: ${error.response.data.error.message}`);}throw new Error('Failed to generate response. Please try again later.');}};// Function to check if an OpenAI API key is valid\nexport const validateOpenAIKey=async apiKey=>{if(!apiKey)return false;try{const requestBody={model:'gpt-3.5-turbo',messages:[{role:'system',content:'Hello'}],max_tokens:5};await axios.post(OPENAI_API_URL,requestBody,{headers:{'Content-Type':'application/json','Authorization':`Bearer ${apiKey}`}});return true;}catch(error){return false;}};","map":{"version":3,"names":["axios","OPENAI_API_URL","generateChatResponse","messages","apiKey","Error","formattedMessages","role","content","map","msg","isUser","requestBody","model","max_tokens","temperature","response","post","headers","data","choices","length","message","trim","error","console","validateOpenAIKey"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/services/openaiService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// OpenAI API configuration\r\nconst OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';\r\n\r\ninterface OpenAIMessage {\r\n  role: 'system' | 'user' | 'assistant';\r\n  content: string;\r\n}\r\n\r\ninterface OpenAIRequestBody {\r\n  model: string;\r\n  messages: OpenAIMessage[];\r\n  max_tokens?: number;\r\n  temperature?: number;\r\n  stream?: boolean;\r\n}\r\n\r\ninterface OpenAIResponse {\r\n  id: string;\r\n  object: string;\r\n  created: number;\r\n  choices: {\r\n    index: number;\r\n    message: OpenAIMessage;\r\n    finish_reason: string;\r\n  }[];\r\n  usage: {\r\n    prompt_tokens: number;\r\n    completion_tokens: number;\r\n    total_tokens: number;\r\n  };\r\n}\r\n\r\nexport const generateChatResponse = async (\r\n  messages: { content: string; isUser: boolean }[],\r\n  apiKey: string\r\n): Promise<string> => {\r\n  if (!apiKey) {\r\n    throw new Error('No OpenAI API key provided');\r\n  }\r\n\r\n  try {\r\n    // Convert messages to OpenAI format\r\n    const formattedMessages: OpenAIMessage[] = [\r\n      {\r\n        role: 'system',\r\n        content: 'You are a helpful AI assistant. Provide concise and accurate responses to user questions.',\r\n      },\r\n      ...messages.map(msg => ({\r\n        role: msg.isUser ? 'user' : 'assistant',\r\n        content: msg.content\r\n      }))\r\n    ];\r\n\r\n    const requestBody: OpenAIRequestBody = {\r\n      model: 'gpt-3.5-turbo', // You can upgrade to gpt-4 if available\r\n      messages: formattedMessages,\r\n      max_tokens: 1000,\r\n      temperature: 0.7,\r\n    };\r\n\r\n    const response = await axios.post<OpenAIResponse>(\r\n      OPENAI_API_URL,\r\n      requestBody,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${apiKey}`\r\n        }\r\n      }\r\n    );\r\n\r\n    if (response.data && response.data.choices && response.data.choices.length > 0) {\r\n      return response.data.choices[0].message.content.trim();\r\n    } else {\r\n      throw new Error('No response from OpenAI');\r\n    }\r\n  } catch (error: any) {\r\n    console.error('Error calling OpenAI API:', error);\r\n    // Return a friendly error message or the specific error from OpenAI\r\n    if (error.response && error.response.data && error.response.data.error) {\r\n      throw new Error(`OpenAI API Error: ${error.response.data.error.message}`);\r\n    }\r\n    throw new Error('Failed to generate response. Please try again later.');\r\n  }\r\n};\r\n\r\n// Function to check if an OpenAI API key is valid\r\nexport const validateOpenAIKey = async (apiKey: string): Promise<boolean> => {\r\n  if (!apiKey) return false;\r\n  \r\n  try {\r\n    const requestBody: OpenAIRequestBody = {\r\n      model: 'gpt-3.5-turbo',\r\n      messages: [\r\n        {\r\n          role: 'system',\r\n          content: 'Hello'\r\n        }\r\n      ],\r\n      max_tokens: 5\r\n    };\r\n\r\n    await axios.post(\r\n      OPENAI_API_URL,\r\n      requestBody,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${apiKey}`\r\n        }\r\n      }\r\n    );\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA,KAAM,CAAAC,cAAc,CAAG,4CAA4C,CA+BnE,MAAO,MAAM,CAAAC,oBAAoB,CAAG,KAAAA,CAClCC,QAAgD,CAChDC,MAAc,GACM,CACpB,GAAI,CAACA,MAAM,CAAE,CACX,KAAM,IAAI,CAAAC,KAAK,CAAC,4BAA4B,CAAC,CAC/C,CAEA,GAAI,CACF;AACA,KAAM,CAAAC,iBAAkC,CAAG,CACzC,CACEC,IAAI,CAAE,QAAQ,CACdC,OAAO,CAAE,2FACX,CAAC,CACD,GAAGL,QAAQ,CAACM,GAAG,CAACC,GAAG,GAAK,CACtBH,IAAI,CAAEG,GAAG,CAACC,MAAM,CAAG,MAAM,CAAG,WAAW,CACvCH,OAAO,CAAEE,GAAG,CAACF,OACf,CAAC,CAAC,CAAC,CACJ,CAED,KAAM,CAAAI,WAA8B,CAAG,CACrCC,KAAK,CAAE,eAAe,CAAE;AACxBV,QAAQ,CAAEG,iBAAiB,CAC3BQ,UAAU,CAAE,IAAI,CAChBC,WAAW,CAAE,GACf,CAAC,CAED,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAhB,KAAK,CAACiB,IAAI,CAC/BhB,cAAc,CACdW,WAAW,CACX,CACEM,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,eAAe,CAAE,UAAUd,MAAM,EACnC,CACF,CACF,CAAC,CAED,GAAIY,QAAQ,CAACG,IAAI,EAAIH,QAAQ,CAACG,IAAI,CAACC,OAAO,EAAIJ,QAAQ,CAACG,IAAI,CAACC,OAAO,CAACC,MAAM,CAAG,CAAC,CAAE,CAC9E,MAAO,CAAAL,QAAQ,CAACG,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACE,OAAO,CAACd,OAAO,CAACe,IAAI,CAAC,CAAC,CACxD,CAAC,IAAM,CACL,KAAM,IAAI,CAAAlB,KAAK,CAAC,yBAAyB,CAAC,CAC5C,CACF,CAAE,MAAOmB,KAAU,CAAE,CACnBC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACjD;AACA,GAAIA,KAAK,CAACR,QAAQ,EAAIQ,KAAK,CAACR,QAAQ,CAACG,IAAI,EAAIK,KAAK,CAACR,QAAQ,CAACG,IAAI,CAACK,KAAK,CAAE,CACtE,KAAM,IAAI,CAAAnB,KAAK,CAAC,qBAAqBmB,KAAK,CAACR,QAAQ,CAACG,IAAI,CAACK,KAAK,CAACF,OAAO,EAAE,CAAC,CAC3E,CACA,KAAM,IAAI,CAAAjB,KAAK,CAAC,sDAAsD,CAAC,CACzE,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAqB,iBAAiB,CAAG,KAAO,CAAAtB,MAAc,EAAuB,CAC3E,GAAI,CAACA,MAAM,CAAE,MAAO,MAAK,CAEzB,GAAI,CACF,KAAM,CAAAQ,WAA8B,CAAG,CACrCC,KAAK,CAAE,eAAe,CACtBV,QAAQ,CAAE,CACR,CACEI,IAAI,CAAE,QAAQ,CACdC,OAAO,CAAE,OACX,CAAC,CACF,CACDM,UAAU,CAAE,CACd,CAAC,CAED,KAAM,CAAAd,KAAK,CAACiB,IAAI,CACdhB,cAAc,CACdW,WAAW,CACX,CACEM,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,eAAe,CAAE,UAAUd,MAAM,EACnC,CACF,CACF,CAAC,CAED,MAAO,KAAI,CACb,CAAE,MAAOoB,KAAK,CAAE,CACd,MAAO,MAAK,CACd,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}