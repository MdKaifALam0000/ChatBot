{"ast":null,"code":"import axios from'axios';// API URL (should be in .env file in production)\nconst API_URL='http://localhost:5000/api';// Demo message history\nconst DEMO_HISTORY=[{_id:'1',content:'Hello! Welcome to the chatbot application.',isUser:false,timestamp:new Date(Date.now()-86400000)// 1 day ago\n},{_id:'2',content:'How can I help you today?',isUser:false,timestamp:new Date(Date.now()-86400000+30000)// 1 day ago + 30 seconds\n},{_id:'3',content:'I\\'d like to know more about your services.',isUser:true,timestamp:new Date(Date.now()-3600000)// 1 hour ago\n},{_id:'4',content:'We offer a variety of AI-powered chat solutions for businesses and individuals. Our services include customer support automation, virtual assistants, and conversational AI interfaces.',isUser:false,timestamp:new Date(Date.now()-3600000+10000)// 1 hour ago + 10 seconds\n}];// Check if a token is a demo token\nconst isDemoToken=token=>{return token==='demo-token-1234567890';};// Get chat history\nexport const getChatHistory=async token=>{if(isDemoToken(token)){// Return demo data with a small delay to simulate network request\nawait new Promise(resolve=>setTimeout(resolve,800));return DEMO_HISTORY;}try{const config={headers:{'x-auth-token':token}};const response=await axios.get(`${API_URL}/messages/history`,config);return response.data;}catch(error){console.error('Error fetching chat history:',error);// Fall back to demo data if request fails\nreturn DEMO_HISTORY;}};// Get user profile\nexport const getUserProfile=async token=>{if(isDemoToken(token)){// Return demo data with a small delay to simulate network request\nawait new Promise(resolve=>setTimeout(resolve,500));return{_id:'1234567890',username:'demouser',email:'demo@example.com'};}try{const config={headers:{'x-auth-token':token}};const response=await axios.get(`${API_URL}/users/me`,config);return response.data;}catch(error){console.error('Error fetching user profile:',error);throw error;}};// Update user profile\nexport const updateUserProfile=async(token,userData)=>{if(isDemoToken(token)){// Return demo data with a small delay to simulate network request\nawait new Promise(resolve=>setTimeout(resolve,700));return{...userData,_id:'1234567890'};}try{const config={headers:{'Content-Type':'application/json','x-auth-token':token}};const response=await axios.put(`${API_URL}/users/me`,userData,config);return response.data;}catch(error){console.error('Error updating user profile:',error);throw error;}};","map":{"version":3,"names":["axios","API_URL","DEMO_HISTORY","_id","content","isUser","timestamp","Date","now","isDemoToken","token","getChatHistory","Promise","resolve","setTimeout","config","headers","response","get","data","error","console","getUserProfile","username","email","updateUserProfile","userData","put"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/services/apiService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// API URL (should be in .env file in production)\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Demo message history\r\nconst DEMO_HISTORY = [\r\n  {\r\n    _id: '1',\r\n    content: 'Hello! Welcome to the chatbot application.',\r\n    isUser: false,\r\n    timestamp: new Date(Date.now() - 86400000) // 1 day ago\r\n  },\r\n  {\r\n    _id: '2',\r\n    content: 'How can I help you today?',\r\n    isUser: false,\r\n    timestamp: new Date(Date.now() - 86400000 + 30000) // 1 day ago + 30 seconds\r\n  },\r\n  {\r\n    _id: '3',\r\n    content: 'I\\'d like to know more about your services.',\r\n    isUser: true,\r\n    timestamp: new Date(Date.now() - 3600000) // 1 hour ago\r\n  },\r\n  {\r\n    _id: '4',\r\n    content: 'We offer a variety of AI-powered chat solutions for businesses and individuals. Our services include customer support automation, virtual assistants, and conversational AI interfaces.',\r\n    isUser: false,\r\n    timestamp: new Date(Date.now() - 3600000 + 10000) // 1 hour ago + 10 seconds\r\n  }\r\n];\r\n\r\n// Check if a token is a demo token\r\nconst isDemoToken = (token: string): boolean => {\r\n  return token === 'demo-token-1234567890';\r\n};\r\n\r\n// Get chat history\r\nexport const getChatHistory = async (token: string) => {\r\n  if (isDemoToken(token)) {\r\n    // Return demo data with a small delay to simulate network request\r\n    await new Promise(resolve => setTimeout(resolve, 800));\r\n    return DEMO_HISTORY;\r\n  }\r\n  \r\n  try {\r\n    const config = {\r\n      headers: {\r\n        'x-auth-token': token\r\n      }\r\n    };\r\n    const response = await axios.get(`${API_URL}/messages/history`, config);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching chat history:', error);\r\n    // Fall back to demo data if request fails\r\n    return DEMO_HISTORY;\r\n  }\r\n};\r\n\r\n// Get user profile\r\nexport const getUserProfile = async (token: string) => {\r\n  if (isDemoToken(token)) {\r\n    // Return demo data with a small delay to simulate network request\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    return {\r\n      _id: '1234567890',\r\n      username: 'demouser',\r\n      email: 'demo@example.com'\r\n    };\r\n  }\r\n  \r\n  try {\r\n    const config = {\r\n      headers: {\r\n        'x-auth-token': token\r\n      }\r\n    };\r\n    const response = await axios.get(`${API_URL}/users/me`, config);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching user profile:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update user profile\r\nexport const updateUserProfile = async (token: string, userData: any) => {\r\n  if (isDemoToken(token)) {\r\n    // Return demo data with a small delay to simulate network request\r\n    await new Promise(resolve => setTimeout(resolve, 700));\r\n    return {\r\n      ...userData,\r\n      _id: '1234567890'\r\n    };\r\n  }\r\n  \r\n  try {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'x-auth-token': token\r\n      }\r\n    };\r\n    const response = await axios.put(`${API_URL}/users/me`, userData, config);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error updating user profile:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}