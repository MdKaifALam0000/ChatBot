{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alamk\\\\OneDrive\\\\Desktop\\\\Chatbot\\\\chatbot-app\\\\src\\\\context\\\\GeminiContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultValue = {\n  apiKey: '',\n  isValidKey: false,\n  isLoading: false,\n  error: null,\n  setApiKey: () => {},\n  validateKey: async () => false,\n  resetError: () => {}\n};\nexport const GeminiContext = /*#__PURE__*/createContext(defaultValue);\nexport const useGemini = () => {\n  _s();\n  const context = useContext(GeminiContext);\n  if (!context) {\n    throw new Error('useGemini must be used within a GeminiProvider');\n  }\n  return context;\n};\n_s(useGemini, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const GeminiProvider = ({\n  children\n}) => {\n  _s2();\n  // Hardcode the API key and consider it valid\n  const [apiKey] = useState(\"AIzaSyAsdXIijrxubtnxPX6pSfXhwZnVc3N6HBw\");\n  const [isValidKey, setIsValidKey] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Keep the validateKey function for API consistency, but simplify it\n  const validateKey = async () => {\n    return true; // Always return true since we're using a hardcoded key\n  };\n\n  // Simple setter to maintain the interface but it won't actually change the key\n  const setApiKey = key => {\n    // No-op - we're using the hardcoded key only\n    console.log(\"API key changes are disabled - using hardcoded key\");\n  };\n  const resetError = () => {\n    setError(null);\n  };\n  return /*#__PURE__*/_jsxDEV(GeminiContext.Provider, {\n    value: {\n      apiKey,\n      isValidKey,\n      isLoading,\n      error,\n      setApiKey,\n      validateKey,\n      resetError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s2(GeminiProvider, \"AIGZNAynC3gljkxX6r23/quw1sE=\");\n_c = GeminiProvider;\nvar _c;\n$RefreshReg$(_c, \"GeminiProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","defaultValue","apiKey","isValidKey","isLoading","error","setApiKey","validateKey","resetError","GeminiContext","useGemini","_s","context","Error","GeminiProvider","children","_s2","setIsValidKey","setIsLoading","setError","key","console","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/context/GeminiContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, ReactNode, useContext } from 'react';\r\nimport { validateGeminiKey } from '../services/geminiService';\r\n\r\ninterface GeminiContextType {\r\n  apiKey: string;\r\n  isValidKey: boolean;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  setApiKey: (key: string) => void;\r\n  validateKey: () => Promise<boolean>;\r\n  resetError: () => void;\r\n}\r\n\r\nconst defaultValue: GeminiContextType = {\r\n  apiKey: '',\r\n  isValidKey: false,\r\n  isLoading: false,\r\n  error: null,\r\n  setApiKey: () => {},\r\n  validateKey: async () => false,\r\n  resetError: () => {},\r\n};\r\n\r\nexport const GeminiContext = createContext<GeminiContextType>(defaultValue);\r\n\r\ninterface GeminiProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const useGemini = () => {\r\n  const context = useContext(GeminiContext);\r\n  \r\n  if (!context) {\r\n    throw new Error('useGemini must be used within a GeminiProvider');\r\n  }\r\n  \r\n  return context;\r\n};\r\n\r\nexport const GeminiProvider: React.FC<GeminiProviderProps> = ({ children }) => {\r\n  // Hardcode the API key and consider it valid\r\n  const [apiKey] = useState<string>(\"AIzaSyAsdXIijrxubtnxPX6pSfXhwZnVc3N6HBw\");\r\n  const [isValidKey, setIsValidKey] = useState<boolean>(true);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Keep the validateKey function for API consistency, but simplify it\r\n  const validateKey = async (): Promise<boolean> => {\r\n    return true; // Always return true since we're using a hardcoded key\r\n  };\r\n\r\n  // Simple setter to maintain the interface but it won't actually change the key\r\n  const setApiKey = (key: string) => {\r\n    // No-op - we're using the hardcoded key only\r\n    console.log(\"API key changes are disabled - using hardcoded key\");\r\n  };\r\n\r\n  const resetError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  return (\r\n    <GeminiContext.Provider\r\n      value={{\r\n        apiKey,\r\n        isValidKey,\r\n        isLoading,\r\n        error,\r\n        setApiKey,\r\n        validateKey,\r\n        resetError,\r\n      }}\r\n    >\r\n      {children}\r\n    </GeminiContext.Provider>\r\n  );\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAwBC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAazF,MAAMC,YAA+B,GAAG;EACtCC,MAAM,EAAE,EAAE;EACVC,UAAU,EAAE,KAAK;EACjBC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,IAAI;EACXC,SAAS,EAAEA,CAAA,KAAM,CAAC,CAAC;EACnBC,WAAW,EAAE,MAAAA,CAAA,KAAY,KAAK;EAC9BC,UAAU,EAAEA,CAAA,KAAM,CAAC;AACrB,CAAC;AAED,OAAO,MAAMC,aAAa,gBAAGb,aAAa,CAAoBK,YAAY,CAAC;AAM3E,OAAO,MAAMS,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAMC,OAAO,GAAGd,UAAU,CAACW,aAAa,CAAC;EAEzC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;EACnE;EAEA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CARWD,SAAS;AAUtB,OAAO,MAAMI,cAA6C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7E;EACA,MAAM,CAACd,MAAM,CAAC,GAAGL,QAAQ,CAAS,yCAAyC,CAAC;EAC5E,MAAM,CAACM,UAAU,EAAEc,aAAa,CAAC,GAAGpB,QAAQ,CAAU,IAAI,CAAC;EAC3D,MAAM,CAACO,SAAS,EAAEc,YAAY,CAAC,GAAGrB,QAAQ,CAAU,KAAK,CAAC;EAC1D,MAAM,CAACQ,KAAK,EAAEc,QAAQ,CAAC,GAAGtB,QAAQ,CAAgB,IAAI,CAAC;;EAEvD;EACA,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAA8B;IAChD,OAAO,IAAI,CAAC,CAAC;EACf,CAAC;;EAED;EACA,MAAMD,SAAS,GAAIc,GAAW,IAAK;IACjC;IACAC,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;EACnE,CAAC;EAED,MAAMd,UAAU,GAAGA,CAAA,KAAM;IACvBW,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC;EAED,oBACEnB,OAAA,CAACS,aAAa,CAACc,QAAQ;IACrBC,KAAK,EAAE;MACLtB,MAAM;MACNC,UAAU;MACVC,SAAS;MACTC,KAAK;MACLC,SAAS;MACTC,WAAW;MACXC;IACF,CAAE;IAAAO,QAAA,EAEDA;EAAQ;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACZ,GAAA,CArCWF,cAA6C;AAAAe,EAAA,GAA7Cf,cAA6C;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}