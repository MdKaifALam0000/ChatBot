{"ast":null,"code":"import axios from 'axios';\n\n// Gemini API configuration\nconst GEMINI_API_URL = 'http://localhost:3001/api/gemini';\nexport const generateChatResponse = async (messages, apiKey) => {\n  if (!apiKey) {\n    throw new Error('No Gemini API key provided');\n  }\n  try {\n    // Convert messages to Gemini format\n    const formattedMessages = messages.map(msg => ({\n      role: msg.isUser ? 'user' : 'model',\n      parts: [{\n        text: msg.content\n      }]\n    }));\n    const requestBody = {\n      contents: formattedMessages,\n      generationConfig: {\n        temperature: 0.7,\n        maxOutputTokens: 1000,\n        topP: 0.95,\n        topK: 40\n      }\n    };\n    console.log('Sending request to Gemini API:', JSON.stringify(requestBody, null, 2));\n    const response = await axios.post(`${GEMINI_API_URL}?key=${apiKey}`, requestBody, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('Received response from Gemini API:', JSON.stringify(response.data, null, 2));\n    if (response.data && response.data.candidates && response.data.candidates.length > 0 && response.data.candidates[0].content && response.data.candidates[0].content.parts && response.data.candidates[0].content.parts.length > 0) {\n      return response.data.candidates[0].content.parts[0].text.trim();\n    } else {\n      throw new Error('No response from Gemini');\n    }\n  } catch (error) {\n    console.error('Error calling Gemini API:', error);\n    if (error.response) {\n      console.error('Response data:', error.response.data);\n      console.error('Response status:', error.response.status);\n      console.error('Response headers:', error.response.headers);\n    } else if (error.request) {\n      console.error('No response received:', error.request);\n    } else {\n      console.error('Error message:', error.message);\n    }\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(`Gemini API Error: ${error.response.data.error.message}`);\n    }\n    throw new Error('Failed to generate response. Please try again later.');\n  }\n};\nexport const validateGeminiKey = async apiKey => {\n  if (!apiKey) return {\n    isValid: false,\n    errorMessage: 'API key is empty'\n  };\n  try {\n    const requestBody = {\n      contents: [{\n        role: 'user',\n        parts: [{\n          text: 'Hello'\n        }]\n      }],\n      generationConfig: {\n        maxOutputTokens: 5\n      }\n    };\n    console.log('Validating Gemini API key...');\n    const response = await axios.post(`${GEMINI_API_URL}?key=${apiKey}`, requestBody, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('Key validation successful');\n    return {\n      isValid: true\n    };\n  } catch (error) {\n    console.error('API key validation error:', error);\n    if (error.response) {\n      console.error('Response data:', error.response.data);\n      console.error('Response status:', error.response.status);\n    } else if (error.request) {\n      console.error('No response received for validation request');\n    }\n    let errorMessage = 'Invalid API key';\n    if (error.response && error.response.data && error.response.data.error) {\n      errorMessage = `Gemini API Error: ${error.response.data.error.message}`;\n    } else if (error.message) {\n      errorMessage = error.message;\n    }\n    return {\n      isValid: false,\n      errorMessage\n    };\n  }\n};","map":{"version":3,"names":["axios","GEMINI_API_URL","generateChatResponse","messages","apiKey","Error","formattedMessages","map","msg","role","isUser","parts","text","content","requestBody","contents","generationConfig","temperature","maxOutputTokens","topP","topK","console","log","JSON","stringify","response","post","headers","data","candidates","length","trim","error","status","request","message","validateGeminiKey","isValid","errorMessage"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/services/geminiService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Gemini API configuration\r\nconst GEMINI_API_URL = 'http://localhost:3001/api/gemini';\r\n\r\ninterface GeminiMessage {\r\n  role: 'user' | 'model';\r\n  parts: {\r\n    text: string;\r\n  }[];\r\n}\r\n\r\ninterface GeminiRequestBody {\r\n  contents: GeminiMessage[];\r\n  generationConfig?: {\r\n    temperature?: number;\r\n    maxOutputTokens?: number;\r\n    topP?: number;\r\n    topK?: number;\r\n  };\r\n}\r\n\r\nexport const generateChatResponse = async (\r\n  messages: { content: string; isUser: boolean }[],\r\n  apiKey: string\r\n): Promise<string> => {\r\n  if (!apiKey) {\r\n    throw new Error('No Gemini API key provided');\r\n  }\r\n\r\n  try {\r\n    // Convert messages to Gemini format\r\n    const formattedMessages: GeminiMessage[] = messages.map(msg => ({\r\n      role: msg.isUser ? 'user' : 'model',\r\n      parts: [{ text: msg.content }]\r\n    }));\r\n\r\n    const requestBody: GeminiRequestBody = {\r\n      contents: formattedMessages,\r\n      generationConfig: {\r\n        temperature: 0.7,\r\n        maxOutputTokens: 1000,\r\n        topP: 0.95,\r\n        topK: 40\r\n      }\r\n    };\r\n\r\n    console.log('Sending request to Gemini API:', JSON.stringify(requestBody, null, 2));\r\n\r\n    const response = await axios.post(\r\n      `${GEMINI_API_URL}?key=${apiKey}`,\r\n      requestBody,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    );\r\n\r\n    console.log('Received response from Gemini API:', JSON.stringify(response.data, null, 2));\r\n\r\n    if (response.data && \r\n        response.data.candidates && \r\n        response.data.candidates.length > 0 && \r\n        response.data.candidates[0].content && \r\n        response.data.candidates[0].content.parts && \r\n        response.data.candidates[0].content.parts.length > 0) {\r\n      return response.data.candidates[0].content.parts[0].text.trim();\r\n    } else {\r\n      throw new Error('No response from Gemini');\r\n    }\r\n  } catch (error: any) {\r\n    console.error('Error calling Gemini API:', error);\r\n    \r\n    if (error.response) {\r\n      console.error('Response data:', error.response.data);\r\n      console.error('Response status:', error.response.status);\r\n      console.error('Response headers:', error.response.headers);\r\n    } else if (error.request) {\r\n      console.error('No response received:', error.request);\r\n    } else {\r\n      console.error('Error message:', error.message);\r\n    }\r\n    \r\n    if (error.response && error.response.data && error.response.data.error) {\r\n      throw new Error(`Gemini API Error: ${error.response.data.error.message}`);\r\n    }\r\n    throw new Error('Failed to generate response. Please try again later.');\r\n  }\r\n};\r\n\r\nexport const validateGeminiKey = async (apiKey: string): Promise<{isValid: boolean; errorMessage?: string}> => {\r\n  if (!apiKey) return {isValid: false, errorMessage: 'API key is empty'};\r\n  \r\n  try {\r\n    const requestBody: GeminiRequestBody = {\r\n      contents: [\r\n        {\r\n          role: 'user',\r\n          parts: [{ text: 'Hello' }]\r\n        }\r\n      ],\r\n      generationConfig: {\r\n        maxOutputTokens: 5\r\n      }\r\n    };\r\n\r\n    console.log('Validating Gemini API key...');\r\n    const response = await axios.post(\r\n      `${GEMINI_API_URL}?key=${apiKey}`,\r\n      requestBody,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    );\r\n    \r\n    console.log('Key validation successful');\r\n    return {isValid: true};\r\n  } catch (error: any) {\r\n    console.error('API key validation error:', error);\r\n    \r\n    if (error.response) {\r\n      console.error('Response data:', error.response.data);\r\n      console.error('Response status:', error.response.status);\r\n    } else if (error.request) {\r\n      console.error('No response received for validation request');\r\n    }\r\n    \r\n    let errorMessage = 'Invalid API key';\r\n    if (error.response && error.response.data && error.response.data.error) {\r\n      errorMessage = `Gemini API Error: ${error.response.data.error.message}`;\r\n    } else if (error.message) {\r\n      errorMessage = error.message;\r\n    }\r\n    \r\n    return {isValid: false, errorMessage};\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}