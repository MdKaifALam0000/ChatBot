{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\nimport { offReceiveMessage, disconnectSocket } from '../services/socketService';\nimport { getChatHistory } from '../services/apiService';\n// Demo messages for initial chat history\nconst DEMO_MESSAGES = [{\n  _id: '1',\n  content: 'Hello! How can I help you today?',\n  isUser: false,\n  timestamp: new Date(Date.now() - 3600000) // 1 hour ago\n}];\n\n// Bot responses for demo mode\nconst BOT_RESPONSES = [\"I'm here to help! What can I do for you?\", \"That's an interesting question. Let me think about that...\", \"I understand what you're asking. Here's what I know about that topic.\", \"Thanks for sharing that information with me.\", \"Let me search for that information for you...\", \"I found several resources that might help with your question.\", \"Could you provide more details about your request?\", \"I'm designed to assist with a variety of topics. What else would you like to know?\", \"That's a great point! I appreciate your insight.\", \"I'm continuously learning to better assist users like you.\"];\n\n// More specific responses based on keywords\nconst KEYWORD_RESPONSES = {\n  \"hello\": [\"Hello there! How can I assist you today?\", \"Hi! What can I help you with?\", \"Greetings! How may I be of service?\"],\n  \"help\": [\"I'd be happy to help! What do you need assistance with?\", \"I'm here to help! Could you let me know what you're looking for?\", \"I can help with various tasks. What specifically do you need help with?\"],\n  \"weather\": [\"The weather today is looking great! Clear skies and 75°F.\", \"Today's forecast shows partly cloudy conditions with a high of 72°F.\", \"It looks like there might be some rain later today. Current temperature is 68°F.\"],\n  \"time\": [`The current time is ${new Date().toLocaleTimeString()}.`, `It's currently ${new Date().toLocaleTimeString()} in your local time zone.`, `According to my clock, it's ${new Date().toLocaleTimeString()}.`],\n  \"thanks\": [\"You're welcome! Is there anything else I can help with?\", \"My pleasure! Let me know if you need anything else.\", \"Happy to help! Any other questions?\"],\n  \"bye\": [\"Goodbye! Have a great day!\", \"Farewell! Feel free to return if you have more questions.\", \"Until next time! Take care!\"]\n};\nexport const useChat = () => {\n  _s();\n  const {\n    token,\n    user\n  } = useContext(AuthContext);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initialize chat and load history\n  useEffect(() => {\n    if (!token) return;\n    const initializeChat = async () => {\n      try {\n        setLoading(true);\n\n        // In a real app, we would connect to the socket server\n        // connectSocket(token);\n\n        // Try to load history from API, fall back to demo data if unavailable\n        try {\n          const history = await getChatHistory(token);\n          setMessages(history);\n        } catch (err) {\n          // Use demo messages as fallback\n          setMessages(DEMO_MESSAGES);\n        }\n        setError(null);\n      } catch (err) {\n        console.error('Error initializing chat:', err);\n        // Still set demo messages even if there's an error\n        setMessages(DEMO_MESSAGES);\n        setError(null); // Clear error since we have fallback\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeChat();\n\n    // Clean up on unmount\n    return () => {\n      offReceiveMessage();\n      disconnectSocket();\n    };\n  }, [token]);\n\n  // Send message function with bot response simulation\n  const sendChatMessage = useCallback(content => {\n    if (!content.trim()) return;\n\n    // Create a temporary message to display immediately\n    const userMessage = {\n      _id: Date.now().toString(),\n      content,\n      isUser: true,\n      timestamp: new Date()\n    };\n\n    // Add to messages state\n    setMessages(prev => [...prev, userMessage]);\n\n    // In a real app, we would send via socket\n    // sendMessage(content);\n\n    // Simulate bot response after a delay\n    setTimeout(() => {\n      // Check for keyword-based responses\n      const lowercaseContent = content.toLowerCase();\n      let botResponse = '';\n\n      // Find matching keywords\n      const matchingKeyword = Object.keys(KEYWORD_RESPONSES).find(keyword => lowercaseContent.includes(keyword));\n      if (matchingKeyword) {\n        // Get a random response for the matching keyword\n        const responses = KEYWORD_RESPONSES[matchingKeyword];\n        botResponse = responses[Math.floor(Math.random() * responses.length)];\n      } else {\n        // If no keyword matches, use generic responses\n        botResponse = BOT_RESPONSES[Math.floor(Math.random() * BOT_RESPONSES.length)];\n      }\n      const botMessage = {\n        _id: Date.now().toString(),\n        content: botResponse,\n        isUser: false,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, botMessage]);\n    }, 1000); // Simulate network delay\n  }, []);\n\n  // Add a welcome message if chat is empty\n  useEffect(() => {\n    if (!loading && messages.length === 0) {\n      setMessages([{\n        _id: 'welcome',\n        content: `Hello${user ? ' ' + user.username : ''}! How can I assist you today?`,\n        isUser: false,\n        timestamp: new Date()\n      }]);\n    }\n  }, [loading, messages.length, user]);\n  return {\n    messages,\n    loading,\n    error,\n    sendMessage: sendChatMessage\n  };\n};\n_s(useChat, \"S/RrS8TRSBQy4dgSLrk0f46eob8=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useContext","AuthContext","offReceiveMessage","disconnectSocket","getChatHistory","DEMO_MESSAGES","_id","content","isUser","timestamp","Date","now","BOT_RESPONSES","KEYWORD_RESPONSES","toLocaleTimeString","useChat","_s","token","user","messages","setMessages","loading","setLoading","error","setError","initializeChat","history","err","console","sendChatMessage","trim","userMessage","toString","prev","setTimeout","lowercaseContent","toLowerCase","botResponse","matchingKeyword","Object","keys","find","keyword","includes","responses","Math","floor","random","length","botMessage","username","sendMessage"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/hooks/useChat.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useContext } from 'react';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport { connectSocket, sendMessage, onReceiveMessage, offReceiveMessage, disconnectSocket } from '../services/socketService';\r\nimport { getChatHistory } from '../services/apiService';\r\n\r\ninterface Message {\r\n  _id: string;\r\n  content: string;\r\n  isUser: boolean;\r\n  timestamp: Date;\r\n}\r\n\r\n// Demo messages for initial chat history\r\nconst DEMO_MESSAGES: Message[] = [\r\n  {\r\n    _id: '1',\r\n    content: 'Hello! How can I help you today?',\r\n    isUser: false,\r\n    timestamp: new Date(Date.now() - 3600000) // 1 hour ago\r\n  }\r\n];\r\n\r\n// Bot responses for demo mode\r\nconst BOT_RESPONSES = [\r\n  \"I'm here to help! What can I do for you?\",\r\n  \"That's an interesting question. Let me think about that...\",\r\n  \"I understand what you're asking. Here's what I know about that topic.\",\r\n  \"Thanks for sharing that information with me.\",\r\n  \"Let me search for that information for you...\",\r\n  \"I found several resources that might help with your question.\",\r\n  \"Could you provide more details about your request?\",\r\n  \"I'm designed to assist with a variety of topics. What else would you like to know?\",\r\n  \"That's a great point! I appreciate your insight.\",\r\n  \"I'm continuously learning to better assist users like you.\",\r\n];\r\n\r\n// More specific responses based on keywords\r\nconst KEYWORD_RESPONSES: Record<string, string[]> = {\r\n  \"hello\": [\r\n    \"Hello there! How can I assist you today?\",\r\n    \"Hi! What can I help you with?\",\r\n    \"Greetings! How may I be of service?\",\r\n  ],\r\n  \"help\": [\r\n    \"I'd be happy to help! What do you need assistance with?\",\r\n    \"I'm here to help! Could you let me know what you're looking for?\",\r\n    \"I can help with various tasks. What specifically do you need help with?\",\r\n  ],\r\n  \"weather\": [\r\n    \"The weather today is looking great! Clear skies and 75°F.\",\r\n    \"Today's forecast shows partly cloudy conditions with a high of 72°F.\",\r\n    \"It looks like there might be some rain later today. Current temperature is 68°F.\",\r\n  ],\r\n  \"time\": [\r\n    `The current time is ${new Date().toLocaleTimeString()}.`,\r\n    `It's currently ${new Date().toLocaleTimeString()} in your local time zone.`,\r\n    `According to my clock, it's ${new Date().toLocaleTimeString()}.`,\r\n  ],\r\n  \"thanks\": [\r\n    \"You're welcome! Is there anything else I can help with?\",\r\n    \"My pleasure! Let me know if you need anything else.\",\r\n    \"Happy to help! Any other questions?\",\r\n  ],\r\n  \"bye\": [\r\n    \"Goodbye! Have a great day!\",\r\n    \"Farewell! Feel free to return if you have more questions.\",\r\n    \"Until next time! Take care!\",\r\n  ],\r\n};\r\n\r\nexport const useChat = () => {\r\n  const { token, user } = useContext(AuthContext);\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Initialize chat and load history\r\n  useEffect(() => {\r\n    if (!token) return;\r\n\r\n    const initializeChat = async () => {\r\n      try {\r\n        setLoading(true);\r\n        \r\n        // In a real app, we would connect to the socket server\r\n        // connectSocket(token);\r\n        \r\n        // Try to load history from API, fall back to demo data if unavailable\r\n        try {\r\n          const history = await getChatHistory(token);\r\n          setMessages(history);\r\n        } catch (err) {\r\n          // Use demo messages as fallback\r\n          setMessages(DEMO_MESSAGES);\r\n        }\r\n        \r\n        setError(null);\r\n      } catch (err) {\r\n        console.error('Error initializing chat:', err);\r\n        // Still set demo messages even if there's an error\r\n        setMessages(DEMO_MESSAGES);\r\n        setError(null); // Clear error since we have fallback\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeChat();\r\n\r\n    // Clean up on unmount\r\n    return () => {\r\n      offReceiveMessage();\r\n      disconnectSocket();\r\n    };\r\n  }, [token]);\r\n\r\n  // Send message function with bot response simulation\r\n  const sendChatMessage = useCallback((content: string) => {\r\n    if (!content.trim()) return;\r\n\r\n    // Create a temporary message to display immediately\r\n    const userMessage: Message = {\r\n      _id: Date.now().toString(),\r\n      content,\r\n      isUser: true,\r\n      timestamp: new Date(),\r\n    };\r\n\r\n    // Add to messages state\r\n    setMessages((prev) => [...prev, userMessage]);\r\n\r\n    // In a real app, we would send via socket\r\n    // sendMessage(content);\r\n\r\n    // Simulate bot response after a delay\r\n    setTimeout(() => {\r\n      // Check for keyword-based responses\r\n      const lowercaseContent = content.toLowerCase();\r\n      let botResponse = '';\r\n      \r\n      // Find matching keywords\r\n      const matchingKeyword = Object.keys(KEYWORD_RESPONSES).find(keyword => \r\n        lowercaseContent.includes(keyword)\r\n      );\r\n      \r\n      if (matchingKeyword) {\r\n        // Get a random response for the matching keyword\r\n        const responses = KEYWORD_RESPONSES[matchingKeyword];\r\n        botResponse = responses[Math.floor(Math.random() * responses.length)];\r\n      } else {\r\n        // If no keyword matches, use generic responses\r\n        botResponse = BOT_RESPONSES[Math.floor(Math.random() * BOT_RESPONSES.length)];\r\n      }\r\n      \r\n      const botMessage: Message = {\r\n        _id: Date.now().toString(),\r\n        content: botResponse,\r\n        isUser: false,\r\n        timestamp: new Date(),\r\n      };\r\n      \r\n      setMessages(prev => [...prev, botMessage]);\r\n    }, 1000); // Simulate network delay\r\n    \r\n  }, []);\r\n\r\n  // Add a welcome message if chat is empty\r\n  useEffect(() => {\r\n    if (!loading && messages.length === 0) {\r\n      setMessages([\r\n        {\r\n          _id: 'welcome',\r\n          content: `Hello${user ? ' ' + user.username : ''}! How can I assist you today?`,\r\n          isUser: false,\r\n          timestamp: new Date(),\r\n        },\r\n      ]);\r\n    }\r\n  }, [loading, messages.length, user]);\r\n\r\n  return {\r\n    messages,\r\n    loading,\r\n    error,\r\n    sendMessage: sendChatMessage,\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}