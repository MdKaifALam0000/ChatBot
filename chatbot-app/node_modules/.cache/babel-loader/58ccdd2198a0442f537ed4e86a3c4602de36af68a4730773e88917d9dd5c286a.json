{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\nimport { offReceiveMessage, disconnectSocket } from '../services/socketService';\nimport { getChatHistory } from '../services/apiService';\nimport { generateChatResponse } from '../services/openaiService';\nimport { useOpenAI } from './useOpenAI';\n// Demo messages for initial chat history\nconst DEMO_MESSAGES = [{\n  _id: '1',\n  content: 'Hello! How can I help you today?',\n  isUser: false,\n  timestamp: new Date(Date.now() - 3600000) // 1 hour ago\n}];\n\n// Bot responses for demo mode (used as fallback if OpenAI fails)\nconst BOT_RESPONSES = [\"I'm here to help! What can I do for you?\", \"That's an interesting question. Let me think about that...\", \"I understand what you're asking. Here's what I know about that topic.\", \"Thanks for sharing that information with me.\", \"Let me search for that information for you...\", \"I found several resources that might help with your question.\", \"Could you provide more details about your request?\", \"I'm designed to assist with a variety of topics. What else would you like to know?\", \"That's a great point! I appreciate your insight.\", \"I'm continuously learning to better assist users like you.\"];\n\n// More specific responses based on keywords (used as fallback if OpenAI fails)\nconst KEYWORD_RESPONSES = {\n  \"hello\": [\"Hello there! How can I assist you today?\", \"Hi! What can I help you with?\", \"Greetings! How may I be of service?\"],\n  \"help\": [\"I'd be happy to help! What do you need assistance with?\", \"I'm here to help! Could you let me know what you're looking for?\", \"I can help with various tasks. What specifically do you need help with?\"],\n  \"weather\": [\"The weather today is looking great! Clear skies and 75°F.\", \"Today's forecast shows partly cloudy conditions with a high of 72°F.\", \"It looks like there might be some rain later today. Current temperature is 68°F.\"],\n  \"time\": [`The current time is ${new Date().toLocaleTimeString()}.`, `It's currently ${new Date().toLocaleTimeString()} in your local time zone.`, `According to my clock, it's ${new Date().toLocaleTimeString()}.`],\n  \"thanks\": [\"You're welcome! Is there anything else I can help with?\", \"My pleasure! Let me know if you need anything else.\", \"Happy to help! Any other questions?\"],\n  \"bye\": [\"Goodbye! Have a great day!\", \"Farewell! Feel free to return if you have more questions.\", \"Until next time! Take care!\"]\n};\nexport const useChat = () => {\n  _s();\n  const {\n    token,\n    user\n  } = useContext(AuthContext);\n  const {\n    apiKey,\n    isValidKey\n  } = useOpenAI();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isTyping, setIsTyping] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Initialize chat and load history\n  useEffect(() => {\n    if (!token) return;\n    const initializeChat = async () => {\n      try {\n        setLoading(true);\n\n        // In a real app, we would connect to the socket server\n        // connectSocket(token);\n\n        // Try to load history from API, fall back to demo data if unavailable\n        try {\n          const history = await getChatHistory(token);\n          setMessages(history);\n        } catch (err) {\n          // Use demo messages as fallback\n          setMessages(DEMO_MESSAGES);\n        }\n        setError(null);\n      } catch (err) {\n        console.error('Error initializing chat:', err);\n        // Still set demo messages even if there's an error\n        setMessages(DEMO_MESSAGES);\n        setError(null); // Clear error since we have fallback\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeChat();\n\n    // Clean up on unmount\n    return () => {\n      offReceiveMessage();\n      disconnectSocket();\n    };\n  }, [token]);\n\n  // Generate a response using OpenAI or fallback to demo responses\n  const generateResponse = async (userMessage, chatHistory) => {\n    // If we have a valid OpenAI API key, use it\n    if (apiKey && isValidKey) {\n      try {\n        const historyForAPI = chatHistory.slice(-10); // Only use last 10 messages to save tokens\n        return await generateChatResponse(historyForAPI, apiKey);\n      } catch (error) {\n        console.error('OpenAI API error:', error);\n        // Fall back to demo responses if OpenAI fails\n      }\n    }\n\n    // Fallback to demo mode\n    // Check for keyword-based responses\n    const lowercaseContent = userMessage.toLowerCase();\n    const matchingKeyword = Object.keys(KEYWORD_RESPONSES).find(keyword => lowercaseContent.includes(keyword));\n    if (matchingKeyword) {\n      // Get a random response for the matching keyword\n      const responses = KEYWORD_RESPONSES[matchingKeyword];\n      return responses[Math.floor(Math.random() * responses.length)];\n    } else {\n      // If no keyword matches, use generic responses\n      return BOT_RESPONSES[Math.floor(Math.random() * BOT_RESPONSES.length)];\n    }\n  };\n\n  // Send message function with bot response \n  const sendChatMessage = useCallback(async content => {\n    if (!content.trim()) return;\n\n    // Create a user message\n    const userMessage = {\n      _id: Date.now().toString(),\n      content,\n      isUser: true,\n      timestamp: new Date()\n    };\n\n    // Add to messages state\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n\n    // Start typing indicator\n    setIsTyping(true);\n    setError(null);\n    try {\n      // Generate response\n      const chatHistory = [...messages, userMessage];\n      const responseContent = await generateResponse(content, chatHistory);\n\n      // Create bot message with response\n      const botMessage = {\n        _id: (Date.now() + 1).toString(),\n        content: responseContent,\n        isUser: false,\n        timestamp: new Date()\n      };\n\n      // Add bot message to state\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n    } catch (err) {\n      console.error('Error generating response:', err);\n      setError(err.message || 'Failed to generate a response. Please try again.');\n    } finally {\n      setIsTyping(false);\n    }\n  }, [messages, apiKey, isValidKey]);\n\n  // Add a welcome message if chat is empty\n  useEffect(() => {\n    if (!loading && messages.length === 0) {\n      setMessages([{\n        _id: 'welcome',\n        content: `Hello${user ? ' ' + user.username : ''}! How can I assist you today?`,\n        isUser: false,\n        timestamp: new Date()\n      }]);\n    }\n  }, [loading, messages.length, user]);\n  return {\n    messages,\n    loading,\n    isTyping,\n    error,\n    sendMessage: sendChatMessage\n  };\n};\n_s(useChat, \"Opo8kFl8DPQZzyTttokzkmVA5F0=\", false, function () {\n  return [useOpenAI];\n});","map":{"version":3,"names":["useState","useEffect","useCallback","useContext","AuthContext","offReceiveMessage","disconnectSocket","getChatHistory","generateChatResponse","useOpenAI","DEMO_MESSAGES","_id","content","isUser","timestamp","Date","now","BOT_RESPONSES","KEYWORD_RESPONSES","toLocaleTimeString","useChat","_s","token","user","apiKey","isValidKey","messages","setMessages","loading","setLoading","isTyping","setIsTyping","error","setError","initializeChat","history","err","console","generateResponse","userMessage","chatHistory","historyForAPI","slice","lowercaseContent","toLowerCase","matchingKeyword","Object","keys","find","keyword","includes","responses","Math","floor","random","length","sendChatMessage","trim","toString","prevMessages","responseContent","botMessage","message","username","sendMessage"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/hooks/useChat.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useContext } from 'react';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport { connectSocket, sendMessage as socketSendMessage, onReceiveMessage, offReceiveMessage, disconnectSocket } from '../services/socketService';\r\nimport { getChatHistory } from '../services/apiService';\r\nimport { generateChatResponse } from '../services/openaiService';\r\nimport { useOpenAI } from './useOpenAI';\r\n\r\ninterface Message {\r\n  _id: string;\r\n  content: string;\r\n  isUser: boolean;\r\n  timestamp: Date;\r\n}\r\n\r\n// Demo messages for initial chat history\r\nconst DEMO_MESSAGES: Message[] = [\r\n  {\r\n    _id: '1',\r\n    content: 'Hello! How can I help you today?',\r\n    isUser: false,\r\n    timestamp: new Date(Date.now() - 3600000) // 1 hour ago\r\n  }\r\n];\r\n\r\n// Bot responses for demo mode (used as fallback if OpenAI fails)\r\nconst BOT_RESPONSES = [\r\n  \"I'm here to help! What can I do for you?\",\r\n  \"That's an interesting question. Let me think about that...\",\r\n  \"I understand what you're asking. Here's what I know about that topic.\",\r\n  \"Thanks for sharing that information with me.\",\r\n  \"Let me search for that information for you...\",\r\n  \"I found several resources that might help with your question.\",\r\n  \"Could you provide more details about your request?\",\r\n  \"I'm designed to assist with a variety of topics. What else would you like to know?\",\r\n  \"That's a great point! I appreciate your insight.\",\r\n  \"I'm continuously learning to better assist users like you.\",\r\n];\r\n\r\n// More specific responses based on keywords (used as fallback if OpenAI fails)\r\nconst KEYWORD_RESPONSES: Record<string, string[]> = {\r\n  \"hello\": [\r\n    \"Hello there! How can I assist you today?\",\r\n    \"Hi! What can I help you with?\",\r\n    \"Greetings! How may I be of service?\",\r\n  ],\r\n  \"help\": [\r\n    \"I'd be happy to help! What do you need assistance with?\",\r\n    \"I'm here to help! Could you let me know what you're looking for?\",\r\n    \"I can help with various tasks. What specifically do you need help with?\",\r\n  ],\r\n  \"weather\": [\r\n    \"The weather today is looking great! Clear skies and 75°F.\",\r\n    \"Today's forecast shows partly cloudy conditions with a high of 72°F.\",\r\n    \"It looks like there might be some rain later today. Current temperature is 68°F.\",\r\n  ],\r\n  \"time\": [\r\n    `The current time is ${new Date().toLocaleTimeString()}.`,\r\n    `It's currently ${new Date().toLocaleTimeString()} in your local time zone.`,\r\n    `According to my clock, it's ${new Date().toLocaleTimeString()}.`,\r\n  ],\r\n  \"thanks\": [\r\n    \"You're welcome! Is there anything else I can help with?\",\r\n    \"My pleasure! Let me know if you need anything else.\",\r\n    \"Happy to help! Any other questions?\",\r\n  ],\r\n  \"bye\": [\r\n    \"Goodbye! Have a great day!\",\r\n    \"Farewell! Feel free to return if you have more questions.\",\r\n    \"Until next time! Take care!\",\r\n  ],\r\n};\r\n\r\nexport const useChat = () => {\r\n  const { token, user } = useContext(AuthContext);\r\n  const { apiKey, isValidKey } = useOpenAI();\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Initialize chat and load history\r\n  useEffect(() => {\r\n    if (!token) return;\r\n\r\n    const initializeChat = async () => {\r\n      try {\r\n        setLoading(true);\r\n        \r\n        // In a real app, we would connect to the socket server\r\n        // connectSocket(token);\r\n        \r\n        // Try to load history from API, fall back to demo data if unavailable\r\n        try {\r\n          const history = await getChatHistory(token);\r\n          setMessages(history);\r\n        } catch (err) {\r\n          // Use demo messages as fallback\r\n          setMessages(DEMO_MESSAGES);\r\n        }\r\n        \r\n        setError(null);\r\n      } catch (err) {\r\n        console.error('Error initializing chat:', err);\r\n        // Still set demo messages even if there's an error\r\n        setMessages(DEMO_MESSAGES);\r\n        setError(null); // Clear error since we have fallback\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeChat();\r\n\r\n    // Clean up on unmount\r\n    return () => {\r\n      offReceiveMessage();\r\n      disconnectSocket();\r\n    };\r\n  }, [token]);\r\n\r\n  // Generate a response using OpenAI or fallback to demo responses\r\n  const generateResponse = async (userMessage: string, chatHistory: Message[]): Promise<string> => {\r\n    // If we have a valid OpenAI API key, use it\r\n    if (apiKey && isValidKey) {\r\n      try {\r\n        const historyForAPI = chatHistory.slice(-10); // Only use last 10 messages to save tokens\r\n        return await generateChatResponse(historyForAPI, apiKey);\r\n      } catch (error) {\r\n        console.error('OpenAI API error:', error);\r\n        // Fall back to demo responses if OpenAI fails\r\n      }\r\n    }\r\n    \r\n    // Fallback to demo mode\r\n    // Check for keyword-based responses\r\n    const lowercaseContent = userMessage.toLowerCase();\r\n    const matchingKeyword = Object.keys(KEYWORD_RESPONSES).find(keyword => \r\n      lowercaseContent.includes(keyword)\r\n    );\r\n    \r\n    if (matchingKeyword) {\r\n      // Get a random response for the matching keyword\r\n      const responses = KEYWORD_RESPONSES[matchingKeyword];\r\n      return responses[Math.floor(Math.random() * responses.length)];\r\n    } else {\r\n      // If no keyword matches, use generic responses\r\n      return BOT_RESPONSES[Math.floor(Math.random() * BOT_RESPONSES.length)];\r\n    }\r\n  };\r\n\r\n  // Send message function with bot response \r\n  const sendChatMessage = useCallback(async (content: string) => {\r\n    if (!content.trim()) return;\r\n\r\n    // Create a user message\r\n    const userMessage: Message = {\r\n      _id: Date.now().toString(),\r\n      content,\r\n      isUser: true,\r\n      timestamp: new Date(),\r\n    };\r\n\r\n    // Add to messages state\r\n    setMessages(prevMessages => [...prevMessages, userMessage]);\r\n    \r\n    // Start typing indicator\r\n    setIsTyping(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Generate response\r\n      const chatHistory = [...messages, userMessage];\r\n      const responseContent = await generateResponse(content, chatHistory);\r\n      \r\n      // Create bot message with response\r\n      const botMessage: Message = {\r\n        _id: (Date.now() + 1).toString(),\r\n        content: responseContent,\r\n        isUser: false,\r\n        timestamp: new Date(),\r\n      };\r\n      \r\n      // Add bot message to state\r\n      setMessages(prevMessages => [...prevMessages, botMessage]);\r\n    } catch (err: any) {\r\n      console.error('Error generating response:', err);\r\n      setError(err.message || 'Failed to generate a response. Please try again.');\r\n    } finally {\r\n      setIsTyping(false);\r\n    }\r\n  }, [messages, apiKey, isValidKey]);\r\n\r\n  // Add a welcome message if chat is empty\r\n  useEffect(() => {\r\n    if (!loading && messages.length === 0) {\r\n      setMessages([\r\n        {\r\n          _id: 'welcome',\r\n          content: `Hello${user ? ' ' + user.username : ''}! How can I assist you today?`,\r\n          isUser: false,\r\n          timestamp: new Date(),\r\n        },\r\n      ]);\r\n    }\r\n  }, [loading, messages.length, user]);\r\n\r\n  return {\r\n    messages,\r\n    loading,\r\n    isTyping,\r\n    error,\r\n    sendMessage: sendChatMessage,\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}