{"ast":null,"code":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Initialize the Gemini API client\nconst getGeminiClient = apiKey => {\n  if (!apiKey) {\n    throw new Error('No Gemini API key provided');\n  }\n  return new GoogleGenerativeAI(apiKey);\n};\nexport const generateChatResponse = async (messages, apiKey) => {\n  try {\n    const genAI = getGeminiClient(apiKey);\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-1.0-pro\"\n    });\n\n    // Start a new chat\n    const chat = model.startChat();\n\n    // Send each message in sequence to maintain context\n    let response;\n    for (const msg of messages) {\n      response = await chat.sendMessage(msg.content);\n    }\n    if (!response) {\n      throw new Error('No response received from Gemini API');\n    }\n    const text = await response.response.text();\n    console.log('Received response from Gemini API:', text);\n    return text;\n  } catch (error) {\n    console.error('Error calling Gemini API:', error);\n    if (error.message) {\n      throw new Error(`Gemini API Error: ${error.message}`);\n    }\n    throw new Error('Failed to generate response. Please try again later.');\n  }\n};\nexport const validateGeminiKey = async apiKey => {\n  if (!apiKey) return {\n    isValid: false,\n    errorMessage: 'API key is empty'\n  };\n  try {\n    const genAI = getGeminiClient(apiKey);\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-1.0-pro\"\n    });\n    console.log('Validating Gemini API key...');\n    const prompt = \"Hello, this is a test message to validate the API key.\";\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const text = response.text();\n    console.log('Key validation successful');\n    return {\n      isValid: true\n    };\n  } catch (error) {\n    console.error('API key validation error:', error);\n    let errorMessage = 'Invalid API key';\n    if (error.message) {\n      errorMessage = `Gemini API Error: ${error.message}`;\n    }\n    return {\n      isValid: false,\n      errorMessage\n    };\n  }\n};","map":{"version":3,"names":["GoogleGenerativeAI","getGeminiClient","apiKey","Error","generateChatResponse","messages","genAI","model","getGenerativeModel","chat","startChat","response","msg","sendMessage","content","text","console","log","error","message","validateGeminiKey","isValid","errorMessage","prompt","result","generateContent"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/services/geminiService.ts"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\n// Initialize the Gemini API client\r\nconst getGeminiClient = (apiKey: string) => {\r\n  if (!apiKey) {\r\n    throw new Error('No Gemini API key provided');\r\n  }\r\n  return new GoogleGenerativeAI(apiKey);\r\n};\r\n\r\nexport const generateChatResponse = async (\r\n  messages: { content: string; isUser: boolean }[],\r\n  apiKey: string\r\n): Promise<string> => {\r\n  try {\r\n    const genAI = getGeminiClient(apiKey);\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-1.0-pro\" });\r\n\r\n    // Start a new chat\r\n    const chat = model.startChat();\r\n\r\n    // Send each message in sequence to maintain context\r\n    let response;\r\n    for (const msg of messages) {\r\n      response = await chat.sendMessage(msg.content);\r\n    }\r\n\r\n    if (!response) {\r\n      throw new Error('No response received from Gemini API');\r\n    }\r\n\r\n    const text = await response.response.text();\r\n    console.log('Received response from Gemini API:', text);\r\n    return text;\r\n  } catch (error: any) {\r\n    console.error('Error calling Gemini API:', error);\r\n    \r\n    if (error.message) {\r\n      throw new Error(`Gemini API Error: ${error.message}`);\r\n    }\r\n    \r\n    throw new Error('Failed to generate response. Please try again later.');\r\n  }\r\n};\r\n\r\nexport const validateGeminiKey = async (apiKey: string): Promise<{isValid: boolean; errorMessage?: string}> => {\r\n  if (!apiKey) return {isValid: false, errorMessage: 'API key is empty'};\r\n  \r\n  try {\r\n    const genAI = getGeminiClient(apiKey);\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-1.0-pro\" });\r\n\r\n    console.log('Validating Gemini API key...');\r\n    const prompt = \"Hello, this is a test message to validate the API key.\";\r\n    const result = await model.generateContent(prompt);\r\n    const response = await result.response;\r\n    const text = response.text();\r\n    \r\n    console.log('Key validation successful');\r\n    return {isValid: true};\r\n  } catch (error: any) {\r\n    console.error('API key validation error:', error);\r\n    \r\n    let errorMessage = 'Invalid API key';\r\n    if (error.message) {\r\n      errorMessage = `Gemini API Error: ${error.message}`;\r\n    }\r\n    \r\n    return {isValid: false, errorMessage};\r\n  }\r\n}; "],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,uBAAuB;;AAE1D;AACA,MAAMC,eAAe,GAAIC,MAAc,IAAK;EAC1C,IAAI,CAACA,MAAM,EAAE;IACX,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EAC/C;EACA,OAAO,IAAIH,kBAAkB,CAACE,MAAM,CAAC;AACvC,CAAC;AAED,OAAO,MAAME,oBAAoB,GAAG,MAAAA,CAClCC,QAAgD,EAChDH,MAAc,KACM;EACpB,IAAI;IACF,MAAMI,KAAK,GAAGL,eAAe,CAACC,MAAM,CAAC;IACrC,MAAMK,KAAK,GAAGD,KAAK,CAACE,kBAAkB,CAAC;MAAED,KAAK,EAAE;IAAiB,CAAC,CAAC;;IAEnE;IACA,MAAME,IAAI,GAAGF,KAAK,CAACG,SAAS,CAAC,CAAC;;IAE9B;IACA,IAAIC,QAAQ;IACZ,KAAK,MAAMC,GAAG,IAAIP,QAAQ,EAAE;MAC1BM,QAAQ,GAAG,MAAMF,IAAI,CAACI,WAAW,CAACD,GAAG,CAACE,OAAO,CAAC;IAChD;IAEA,IAAI,CAACH,QAAQ,EAAE;MACb,MAAM,IAAIR,KAAK,CAAC,sCAAsC,CAAC;IACzD;IAEA,MAAMY,IAAI,GAAG,MAAMJ,QAAQ,CAACA,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC3CC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEF,IAAI,CAAC;IACvD,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOG,KAAU,EAAE;IACnBF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IAEjD,IAAIA,KAAK,CAACC,OAAO,EAAE;MACjB,MAAM,IAAIhB,KAAK,CAAC,qBAAqBe,KAAK,CAACC,OAAO,EAAE,CAAC;IACvD;IAEA,MAAM,IAAIhB,KAAK,CAAC,sDAAsD,CAAC;EACzE;AACF,CAAC;AAED,OAAO,MAAMiB,iBAAiB,GAAG,MAAOlB,MAAc,IAAyD;EAC7G,IAAI,CAACA,MAAM,EAAE,OAAO;IAACmB,OAAO,EAAE,KAAK;IAAEC,YAAY,EAAE;EAAkB,CAAC;EAEtE,IAAI;IACF,MAAMhB,KAAK,GAAGL,eAAe,CAACC,MAAM,CAAC;IACrC,MAAMK,KAAK,GAAGD,KAAK,CAACE,kBAAkB,CAAC;MAAED,KAAK,EAAE;IAAiB,CAAC,CAAC;IAEnES,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3C,MAAMM,MAAM,GAAG,wDAAwD;IACvE,MAAMC,MAAM,GAAG,MAAMjB,KAAK,CAACkB,eAAe,CAACF,MAAM,CAAC;IAClD,MAAMZ,QAAQ,GAAG,MAAMa,MAAM,CAACb,QAAQ;IACtC,MAAMI,IAAI,GAAGJ,QAAQ,CAACI,IAAI,CAAC,CAAC;IAE5BC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IACxC,OAAO;MAACI,OAAO,EAAE;IAAI,CAAC;EACxB,CAAC,CAAC,OAAOH,KAAU,EAAE;IACnBF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IAEjD,IAAII,YAAY,GAAG,iBAAiB;IACpC,IAAIJ,KAAK,CAACC,OAAO,EAAE;MACjBG,YAAY,GAAG,qBAAqBJ,KAAK,CAACC,OAAO,EAAE;IACrD;IAEA,OAAO;MAACE,OAAO,EAAE,KAAK;MAAEC;IAAY,CAAC;EACvC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}