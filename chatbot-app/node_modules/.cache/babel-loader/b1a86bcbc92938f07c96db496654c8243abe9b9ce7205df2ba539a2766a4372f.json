{"ast":null,"code":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Initialize the Gemini API client\nconst getGeminiClient = apiKey => {\n  return new GoogleGenerativeAI(apiKey);\n};\nexport const generateChatResponse = async (messages, apiKey) => {\n  if (!apiKey) {\n    throw new Error('No Gemini API key provided');\n  }\n  try {\n    const genAI = getGeminiClient(apiKey);\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-pro\"\n    });\n\n    // Convert messages to chat history format\n    const chatHistory = messages.map(msg => ({\n      role: msg.isUser ? 'user' : 'model',\n      parts: [{\n        text: msg.content\n      }]\n    }));\n\n    // Start a new chat with history\n    const chat = model.startChat({\n      history: chatHistory,\n      generationConfig: {\n        temperature: 0.7,\n        maxOutputTokens: 1000,\n        topP: 0.95,\n        topK: 40\n      }\n    });\n\n    // Get the last user message\n    const lastUserMessage = messages[messages.length - 1].content;\n    console.log('Sending request to Gemini API:', lastUserMessage);\n    const result = await chat.sendMessage(lastUserMessage);\n    const response = await result.response;\n    const text = response.text();\n    console.log('Received response from Gemini API:', text);\n    return text;\n  } catch (error) {\n    console.error('Error calling Gemini API:', error);\n    if (error.response) {\n      console.error('Response data:', error.response.data);\n      console.error('Response status:', error.response.status);\n      console.error('Response headers:', error.response.headers);\n    } else if (error.request) {\n      console.error('No response received:', error.request);\n    } else {\n      console.error('Error message:', error.message);\n    }\n    throw new Error('Failed to generate response. Please try again later.');\n  }\n};\nexport const validateGeminiKey = async apiKey => {\n  if (!apiKey) return {\n    isValid: false,\n    errorMessage: 'API key is empty'\n  };\n  try {\n    const genAI = getGeminiClient(apiKey);\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-pro\"\n    });\n    console.log('Validating Gemini API key...');\n    const result = await model.generateContent(\"Hello\");\n    const response = await result.response;\n    const text = response.text();\n    console.log('Key validation successful');\n    return {\n      isValid: true\n    };\n  } catch (error) {\n    console.error('API key validation error:', error);\n    let errorMessage = 'Invalid API key';\n    if (error.message) {\n      errorMessage = error.message;\n    }\n    return {\n      isValid: false,\n      errorMessage\n    };\n  }\n};","map":{"version":3,"names":["GoogleGenerativeAI","getGeminiClient","apiKey","generateChatResponse","messages","Error","genAI","model","getGenerativeModel","chatHistory","map","msg","role","isUser","parts","text","content","chat","startChat","history","generationConfig","temperature","maxOutputTokens","topP","topK","lastUserMessage","length","console","log","result","sendMessage","response","error","data","status","headers","request","message","validateGeminiKey","isValid","errorMessage","generateContent"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/services/geminiService.ts"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\n// Initialize the Gemini API client\r\nconst getGeminiClient = (apiKey: string) => {\r\n  return new GoogleGenerativeAI(apiKey);\r\n};\r\n\r\nexport const generateChatResponse = async (\r\n  messages: { content: string; isUser: boolean }[],\r\n  apiKey: string\r\n): Promise<string> => {\r\n  if (!apiKey) {\r\n    throw new Error('No Gemini API key provided');\r\n  }\r\n\r\n  try {\r\n    const genAI = getGeminiClient(apiKey);\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n\r\n    // Convert messages to chat history format\r\n    const chatHistory = messages.map(msg => ({\r\n      role: msg.isUser ? 'user' : 'model',\r\n      parts: [{ text: msg.content }]\r\n    }));\r\n\r\n    // Start a new chat with history\r\n    const chat = model.startChat({\r\n      history: chatHistory,\r\n      generationConfig: {\r\n        temperature: 0.7,\r\n        maxOutputTokens: 1000,\r\n        topP: 0.95,\r\n        topK: 40\r\n      }\r\n    });\r\n\r\n    // Get the last user message\r\n    const lastUserMessage = messages[messages.length - 1].content;\r\n\r\n    console.log('Sending request to Gemini API:', lastUserMessage);\r\n\r\n    const result = await chat.sendMessage(lastUserMessage);\r\n    const response = await result.response;\r\n    const text = response.text();\r\n\r\n    console.log('Received response from Gemini API:', text);\r\n    return text;\r\n  } catch (error: any) {\r\n    console.error('Error calling Gemini API:', error);\r\n    \r\n    if (error.response) {\r\n      console.error('Response data:', error.response.data);\r\n      console.error('Response status:', error.response.status);\r\n      console.error('Response headers:', error.response.headers);\r\n    } else if (error.request) {\r\n      console.error('No response received:', error.request);\r\n    } else {\r\n      console.error('Error message:', error.message);\r\n    }\r\n    \r\n    throw new Error('Failed to generate response. Please try again later.');\r\n  }\r\n};\r\n\r\nexport const validateGeminiKey = async (apiKey: string): Promise<{isValid: boolean; errorMessage?: string}> => {\r\n  if (!apiKey) return {isValid: false, errorMessage: 'API key is empty'};\r\n  \r\n  try {\r\n    const genAI = getGeminiClient(apiKey);\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n\r\n    console.log('Validating Gemini API key...');\r\n    const result = await model.generateContent(\"Hello\");\r\n    const response = await result.response;\r\n    const text = response.text();\r\n    \r\n    console.log('Key validation successful');\r\n    return {isValid: true};\r\n  } catch (error: any) {\r\n    console.error('API key validation error:', error);\r\n    \r\n    let errorMessage = 'Invalid API key';\r\n    if (error.message) {\r\n      errorMessage = error.message;\r\n    }\r\n    \r\n    return {isValid: false, errorMessage};\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}