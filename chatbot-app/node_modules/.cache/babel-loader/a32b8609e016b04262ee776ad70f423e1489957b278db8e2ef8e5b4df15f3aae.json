{"ast":null,"code":"import{GoogleGenerativeAI}from\"@google/generative-ai\";// Hardcoded API key\nconst API_KEY=\"AIzaSyAsdXIijrxubtnxPX6pSfXhwZnVc3N6HBw\";// Initialize the Gemini API client\nconst getGeminiClient=()=>{return new GoogleGenerativeAI(API_KEY);};export const generateChatResponse=async messages=>{try{const genAI=getGeminiClient();const model=genAI.getGenerativeModel({model:\"gemini-1.0-pro\"});// Start a new chat\nconst chat=model.startChat();// Send each message in sequence to maintain context\nlet response;for(const msg of messages){response=await chat.sendMessage(msg.content);}if(!response){throw new Error('No response received from Gemini API');}const text=await response.response.text();console.log('Received response from Gemini API:',text);return text;}catch(error){console.error('Error calling Gemini API:',error);if(error.message){throw new Error(`Gemini API Error: ${error.message}`);}throw new Error('Failed to generate response. Please try again later.');}};export const validateGeminiKey=async()=>{try{const genAI=getGeminiClient();const model=genAI.getGenerativeModel({model:\"gemini-1.0-pro\"});console.log('Validating Gemini API key...');const prompt=\"Hello, this is a test message to validate the API key.\";const result=await model.generateContent(prompt);const response=await result.response;const text=response.text();console.log('Key validation successful');return{isValid:true};}catch(error){console.error('API key validation error:',error);let errorMessage='Invalid API key';if(error.message){errorMessage=`Gemini API Error: ${error.message}`;}return{isValid:false,errorMessage};}};","map":{"version":3,"names":["GoogleGenerativeAI","API_KEY","getGeminiClient","generateChatResponse","messages","genAI","model","getGenerativeModel","chat","startChat","response","msg","sendMessage","content","Error","text","console","log","error","message","validateGeminiKey","prompt","result","generateContent","isValid","errorMessage"],"sources":["C:/Users/alamk/OneDrive/Desktop/Chatbot/chatbot-app/src/services/geminiService.ts"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\n// Hardcoded API key\r\nconst API_KEY = \"AIzaSyAsdXIijrxubtnxPX6pSfXhwZnVc3N6HBw\";\r\n\r\n// Initialize the Gemini API client\r\nconst getGeminiClient = () => {\r\n  return new GoogleGenerativeAI(API_KEY);\r\n};\r\n\r\nexport const generateChatResponse = async (\r\n  messages: { content: string; isUser: boolean }[]\r\n): Promise<string> => {\r\n  try {\r\n    const genAI = getGeminiClient();\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-1.0-pro\" });\r\n\r\n    // Start a new chat\r\n    const chat = model.startChat();\r\n\r\n    // Send each message in sequence to maintain context\r\n    let response;\r\n    for (const msg of messages) {\r\n      response = await chat.sendMessage(msg.content);\r\n    }\r\n\r\n    if (!response) {\r\n      throw new Error('No response received from Gemini API');\r\n    }\r\n\r\n    const text = await response.response.text();\r\n    console.log('Received response from Gemini API:', text);\r\n    return text;\r\n  } catch (error: any) {\r\n    console.error('Error calling Gemini API:', error);\r\n    \r\n    if (error.message) {\r\n      throw new Error(`Gemini API Error: ${error.message}`);\r\n    }\r\n    \r\n    throw new Error('Failed to generate response. Please try again later.');\r\n  }\r\n};\r\n\r\nexport const validateGeminiKey = async (): Promise<{isValid: boolean; errorMessage?: string}> => {\r\n  try {\r\n    const genAI = getGeminiClient();\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-1.0-pro\" });\r\n\r\n    console.log('Validating Gemini API key...');\r\n    const prompt = \"Hello, this is a test message to validate the API key.\";\r\n    const result = await model.generateContent(prompt);\r\n    const response = await result.response;\r\n    const text = response.text();\r\n    \r\n    console.log('Key validation successful');\r\n    return {isValid: true};\r\n  } catch (error: any) {\r\n    console.error('API key validation error:', error);\r\n    \r\n    let errorMessage = 'Invalid API key';\r\n    if (error.message) {\r\n      errorMessage = `Gemini API Error: ${error.message}`;\r\n    }\r\n    \r\n    return {isValid: false, errorMessage};\r\n  }\r\n}; "],"mappings":"AAAA,OAASA,kBAAkB,KAAQ,uBAAuB,CAE1D;AACA,KAAM,CAAAC,OAAO,CAAG,yCAAyC,CAEzD;AACA,KAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CAC5B,MAAO,IAAI,CAAAF,kBAAkB,CAACC,OAAO,CAAC,CACxC,CAAC,CAED,MAAO,MAAM,CAAAE,oBAAoB,CAAG,KAClC,CAAAC,QAAgD,EAC5B,CACpB,GAAI,CACF,KAAM,CAAAC,KAAK,CAAGH,eAAe,CAAC,CAAC,CAC/B,KAAM,CAAAI,KAAK,CAAGD,KAAK,CAACE,kBAAkB,CAAC,CAAED,KAAK,CAAE,gBAAiB,CAAC,CAAC,CAEnE;AACA,KAAM,CAAAE,IAAI,CAAGF,KAAK,CAACG,SAAS,CAAC,CAAC,CAE9B;AACA,GAAI,CAAAC,QAAQ,CACZ,IAAK,KAAM,CAAAC,GAAG,GAAI,CAAAP,QAAQ,CAAE,CAC1BM,QAAQ,CAAG,KAAM,CAAAF,IAAI,CAACI,WAAW,CAACD,GAAG,CAACE,OAAO,CAAC,CAChD,CAEA,GAAI,CAACH,QAAQ,CAAE,CACb,KAAM,IAAI,CAAAI,KAAK,CAAC,sCAAsC,CAAC,CACzD,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAL,QAAQ,CAACA,QAAQ,CAACK,IAAI,CAAC,CAAC,CAC3CC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAEF,IAAI,CAAC,CACvD,MAAO,CAAAA,IAAI,CACb,CAAE,MAAOG,KAAU,CAAE,CACnBF,OAAO,CAACE,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CAEjD,GAAIA,KAAK,CAACC,OAAO,CAAE,CACjB,KAAM,IAAI,CAAAL,KAAK,CAAC,qBAAqBI,KAAK,CAACC,OAAO,EAAE,CAAC,CACvD,CAEA,KAAM,IAAI,CAAAL,KAAK,CAAC,sDAAsD,CAAC,CACzE,CACF,CAAC,CAED,MAAO,MAAM,CAAAM,iBAAiB,CAAG,KAAAA,CAAA,GAAgE,CAC/F,GAAI,CACF,KAAM,CAAAf,KAAK,CAAGH,eAAe,CAAC,CAAC,CAC/B,KAAM,CAAAI,KAAK,CAAGD,KAAK,CAACE,kBAAkB,CAAC,CAAED,KAAK,CAAE,gBAAiB,CAAC,CAAC,CAEnEU,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAC3C,KAAM,CAAAI,MAAM,CAAG,wDAAwD,CACvE,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAhB,KAAK,CAACiB,eAAe,CAACF,MAAM,CAAC,CAClD,KAAM,CAAAX,QAAQ,CAAG,KAAM,CAAAY,MAAM,CAACZ,QAAQ,CACtC,KAAM,CAAAK,IAAI,CAAGL,QAAQ,CAACK,IAAI,CAAC,CAAC,CAE5BC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC,CACxC,MAAO,CAACO,OAAO,CAAE,IAAI,CAAC,CACxB,CAAE,MAAON,KAAU,CAAE,CACnBF,OAAO,CAACE,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CAEjD,GAAI,CAAAO,YAAY,CAAG,iBAAiB,CACpC,GAAIP,KAAK,CAACC,OAAO,CAAE,CACjBM,YAAY,CAAG,qBAAqBP,KAAK,CAACC,OAAO,EAAE,CACrD,CAEA,MAAO,CAACK,OAAO,CAAE,KAAK,CAAEC,YAAY,CAAC,CACvC,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}